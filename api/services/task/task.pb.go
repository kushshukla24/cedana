// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.12.4
// source: task.proto

package task

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type FlagEnum int32

const (
	FlagEnum_JOB_STARTUP_FAILED FlagEnum = 0
	FlagEnum_JOB_KILLED         FlagEnum = 1
	FlagEnum_JOB_IDLE           FlagEnum = 2
	FlagEnum_JOB_RUNNING        FlagEnum = 3
	FlagEnum_JOB_PENDING        FlagEnum = 4
	FlagEnum_JOB_SETUP_FAILED   FlagEnum = 5
	FlagEnum_JOB_DONE           FlagEnum = 6
)

// Enum value maps for FlagEnum.
var (
	FlagEnum_name = map[int32]string{
		0: "JOB_STARTUP_FAILED",
		1: "JOB_KILLED",
		2: "JOB_IDLE",
		3: "JOB_RUNNING",
		4: "JOB_PENDING",
		5: "JOB_SETUP_FAILED",
		6: "JOB_DONE",
	}
	FlagEnum_value = map[string]int32{
		"JOB_STARTUP_FAILED": 0,
		"JOB_KILLED":         1,
		"JOB_IDLE":           2,
		"JOB_RUNNING":        3,
		"JOB_PENDING":        4,
		"JOB_SETUP_FAILED":   5,
		"JOB_DONE":           6,
	}
)

func (x FlagEnum) Enum() *FlagEnum {
	p := new(FlagEnum)
	*p = x
	return p
}

func (x FlagEnum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FlagEnum) Descriptor() protoreflect.EnumDescriptor {
	return file_task_proto_enumTypes[0].Descriptor()
}

func (FlagEnum) Type() protoreflect.EnumType {
	return &file_task_proto_enumTypes[0]
}

func (x FlagEnum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FlagEnum.Descriptor instead.
func (FlagEnum) EnumDescriptor() ([]byte, []int) {
	return file_task_proto_rawDescGZIP(), []int{0}
}

type CheckpointState int32

const (
	CheckpointState_CHECKPOINTED      CheckpointState = 0
	CheckpointState_CHECKPOINT_FAILED CheckpointState = 1
	CheckpointState_RESTORED          CheckpointState = 2
	CheckpointState_RESTORE_FAILED    CheckpointState = 3
)

// Enum value maps for CheckpointState.
var (
	CheckpointState_name = map[int32]string{
		0: "CHECKPOINTED",
		1: "CHECKPOINT_FAILED",
		2: "RESTORED",
		3: "RESTORE_FAILED",
	}
	CheckpointState_value = map[string]int32{
		"CHECKPOINTED":      0,
		"CHECKPOINT_FAILED": 1,
		"RESTORED":          2,
		"RESTORE_FAILED":    3,
	}
)

func (x CheckpointState) Enum() *CheckpointState {
	p := new(CheckpointState)
	*p = x
	return p
}

func (x CheckpointState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CheckpointState) Descriptor() protoreflect.EnumDescriptor {
	return file_task_proto_enumTypes[1].Descriptor()
}

func (CheckpointState) Type() protoreflect.EnumType {
	return &file_task_proto_enumTypes[1]
}

func (x CheckpointState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CheckpointState.Descriptor instead.
func (CheckpointState) EnumDescriptor() ([]byte, []int) {
	return file_task_proto_rawDescGZIP(), []int{1}
}

type DumpArgs_DumpType int32

const (
	DumpArgs_LOCAL  DumpArgs_DumpType = 0
	DumpArgs_REMOTE DumpArgs_DumpType = 1
)

// Enum value maps for DumpArgs_DumpType.
var (
	DumpArgs_DumpType_name = map[int32]string{
		0: "LOCAL",
		1: "REMOTE",
	}
	DumpArgs_DumpType_value = map[string]int32{
		"LOCAL":  0,
		"REMOTE": 1,
	}
)

func (x DumpArgs_DumpType) Enum() *DumpArgs_DumpType {
	p := new(DumpArgs_DumpType)
	*p = x
	return p
}

func (x DumpArgs_DumpType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DumpArgs_DumpType) Descriptor() protoreflect.EnumDescriptor {
	return file_task_proto_enumTypes[2].Descriptor()
}

func (DumpArgs_DumpType) Type() protoreflect.EnumType {
	return &file_task_proto_enumTypes[2]
}

func (x DumpArgs_DumpType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DumpArgs_DumpType.Descriptor instead.
func (DumpArgs_DumpType) EnumDescriptor() ([]byte, []int) {
	return file_task_proto_rawDescGZIP(), []int{5, 0}
}

type RestoreArgs_RestoreType int32

const (
	RestoreArgs_LOCAL  RestoreArgs_RestoreType = 0
	RestoreArgs_REMOTE RestoreArgs_RestoreType = 1
)

// Enum value maps for RestoreArgs_RestoreType.
var (
	RestoreArgs_RestoreType_name = map[int32]string{
		0: "LOCAL",
		1: "REMOTE",
	}
	RestoreArgs_RestoreType_value = map[string]int32{
		"LOCAL":  0,
		"REMOTE": 1,
	}
)

func (x RestoreArgs_RestoreType) Enum() *RestoreArgs_RestoreType {
	p := new(RestoreArgs_RestoreType)
	*p = x
	return p
}

func (x RestoreArgs_RestoreType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RestoreArgs_RestoreType) Descriptor() protoreflect.EnumDescriptor {
	return file_task_proto_enumTypes[3].Descriptor()
}

func (RestoreArgs_RestoreType) Type() protoreflect.EnumType {
	return &file_task_proto_enumTypes[3]
}

func (x RestoreArgs_RestoreType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RestoreArgs_RestoreType.Descriptor instead.
func (RestoreArgs_RestoreType) EnumDescriptor() ([]byte, []int) {
	return file_task_proto_rawDescGZIP(), []int{7, 0}
}

type ProcessState_ContainerRuntimeOpts int32

const (
	ProcessState_CONTAINERD ProcessState_ContainerRuntimeOpts = 0
	ProcessState_RUNC       ProcessState_ContainerRuntimeOpts = 1
)

// Enum value maps for ProcessState_ContainerRuntimeOpts.
var (
	ProcessState_ContainerRuntimeOpts_name = map[int32]string{
		0: "CONTAINERD",
		1: "RUNC",
	}
	ProcessState_ContainerRuntimeOpts_value = map[string]int32{
		"CONTAINERD": 0,
		"RUNC":       1,
	}
)

func (x ProcessState_ContainerRuntimeOpts) Enum() *ProcessState_ContainerRuntimeOpts {
	p := new(ProcessState_ContainerRuntimeOpts)
	*p = x
	return p
}

func (x ProcessState_ContainerRuntimeOpts) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ProcessState_ContainerRuntimeOpts) Descriptor() protoreflect.EnumDescriptor {
	return file_task_proto_enumTypes[4].Descriptor()
}

func (ProcessState_ContainerRuntimeOpts) Type() protoreflect.EnumType {
	return &file_task_proto_enumTypes[4]
}

func (x ProcessState_ContainerRuntimeOpts) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ProcessState_ContainerRuntimeOpts.Descriptor instead.
func (ProcessState_ContainerRuntimeOpts) EnumDescriptor() ([]byte, []int) {
	return file_task_proto_rawDescGZIP(), []int{13, 0}
}

type OpenFilesStat_StreamType int32

const (
	OpenFilesStat_STDIN  OpenFilesStat_StreamType = 0
	OpenFilesStat_STDOUT OpenFilesStat_StreamType = 1
	OpenFilesStat_STDERR OpenFilesStat_StreamType = 2
	OpenFilesStat_NONE   OpenFilesStat_StreamType = 3
)

// Enum value maps for OpenFilesStat_StreamType.
var (
	OpenFilesStat_StreamType_name = map[int32]string{
		0: "STDIN",
		1: "STDOUT",
		2: "STDERR",
		3: "NONE",
	}
	OpenFilesStat_StreamType_value = map[string]int32{
		"STDIN":  0,
		"STDOUT": 1,
		"STDERR": 2,
		"NONE":   3,
	}
)

func (x OpenFilesStat_StreamType) Enum() *OpenFilesStat_StreamType {
	p := new(OpenFilesStat_StreamType)
	*p = x
	return p
}

func (x OpenFilesStat_StreamType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OpenFilesStat_StreamType) Descriptor() protoreflect.EnumDescriptor {
	return file_task_proto_enumTypes[5].Descriptor()
}

func (OpenFilesStat_StreamType) Type() protoreflect.EnumType {
	return &file_task_proto_enumTypes[5]
}

func (x OpenFilesStat_StreamType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OpenFilesStat_StreamType.Descriptor instead.
func (OpenFilesStat_StreamType) EnumDescriptor() ([]byte, []int) {
	return file_task_proto_rawDescGZIP(), []int{17, 0}
}

type CheckpointReason_CheckpointReasonEnum int32

const (
	CheckpointReason_INSTANCE_TERMINATION CheckpointReason_CheckpointReasonEnum = 0
	CheckpointReason_JOB_TERMINATION      CheckpointReason_CheckpointReasonEnum = 1
	CheckpointReason_HEARTBEAT            CheckpointReason_CheckpointReasonEnum = 2
)

// Enum value maps for CheckpointReason_CheckpointReasonEnum.
var (
	CheckpointReason_CheckpointReasonEnum_name = map[int32]string{
		0: "INSTANCE_TERMINATION",
		1: "JOB_TERMINATION",
		2: "HEARTBEAT",
	}
	CheckpointReason_CheckpointReasonEnum_value = map[string]int32{
		"INSTANCE_TERMINATION": 0,
		"JOB_TERMINATION":      1,
		"HEARTBEAT":            2,
	}
)

func (x CheckpointReason_CheckpointReasonEnum) Enum() *CheckpointReason_CheckpointReasonEnum {
	p := new(CheckpointReason_CheckpointReasonEnum)
	*p = x
	return p
}

func (x CheckpointReason_CheckpointReasonEnum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CheckpointReason_CheckpointReasonEnum) Descriptor() protoreflect.EnumDescriptor {
	return file_task_proto_enumTypes[6].Descriptor()
}

func (CheckpointReason_CheckpointReasonEnum) Type() protoreflect.EnumType {
	return &file_task_proto_enumTypes[6]
}

func (x CheckpointReason_CheckpointReasonEnum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CheckpointReason_CheckpointReasonEnum.Descriptor instead.
func (CheckpointReason_CheckpointReasonEnum) EnumDescriptor() ([]byte, []int) {
	return file_task_proto_rawDescGZIP(), []int{22, 0}
}

type RuncDumpArgs_DumpType int32

const (
	RuncDumpArgs_LOCAL  RuncDumpArgs_DumpType = 0
	RuncDumpArgs_REMOTE RuncDumpArgs_DumpType = 1
)

// Enum value maps for RuncDumpArgs_DumpType.
var (
	RuncDumpArgs_DumpType_name = map[int32]string{
		0: "LOCAL",
		1: "REMOTE",
	}
	RuncDumpArgs_DumpType_value = map[string]int32{
		"LOCAL":  0,
		"REMOTE": 1,
	}
)

func (x RuncDumpArgs_DumpType) Enum() *RuncDumpArgs_DumpType {
	p := new(RuncDumpArgs_DumpType)
	*p = x
	return p
}

func (x RuncDumpArgs_DumpType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RuncDumpArgs_DumpType) Descriptor() protoreflect.EnumDescriptor {
	return file_task_proto_enumTypes[7].Descriptor()
}

func (RuncDumpArgs_DumpType) Type() protoreflect.EnumType {
	return &file_task_proto_enumTypes[7]
}

func (x RuncDumpArgs_DumpType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RuncDumpArgs_DumpType.Descriptor instead.
func (RuncDumpArgs_DumpType) EnumDescriptor() ([]byte, []int) {
	return file_task_proto_rawDescGZIP(), []int{35, 0}
}

type RuncRestoreArgs_RestoreType int32

const (
	RuncRestoreArgs_LOCAL  RuncRestoreArgs_RestoreType = 0
	RuncRestoreArgs_REMOTE RuncRestoreArgs_RestoreType = 1
)

// Enum value maps for RuncRestoreArgs_RestoreType.
var (
	RuncRestoreArgs_RestoreType_name = map[int32]string{
		0: "LOCAL",
		1: "REMOTE",
	}
	RuncRestoreArgs_RestoreType_value = map[string]int32{
		"LOCAL":  0,
		"REMOTE": 1,
	}
)

func (x RuncRestoreArgs_RestoreType) Enum() *RuncRestoreArgs_RestoreType {
	p := new(RuncRestoreArgs_RestoreType)
	*p = x
	return p
}

func (x RuncRestoreArgs_RestoreType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RuncRestoreArgs_RestoreType) Descriptor() protoreflect.EnumDescriptor {
	return file_task_proto_enumTypes[8].Descriptor()
}

func (RuncRestoreArgs_RestoreType) Type() protoreflect.EnumType {
	return &file_task_proto_enumTypes[8]
}

func (x RuncRestoreArgs_RestoreType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RuncRestoreArgs_RestoreType.Descriptor instead.
func (RuncRestoreArgs_RestoreType) EnumDescriptor() ([]byte, []int) {
	return file_task_proto_rawDescGZIP(), []int{38, 0}
}

type ListArgs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Root      string `protobuf:"bytes,1,opt,name=Root,proto3" json:"Root,omitempty"`
	Namespace string `protobuf:"bytes,2,opt,name=Namespace,proto3" json:"Namespace,omitempty"`
}

func (x *ListArgs) Reset() {
	*x = ListArgs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_task_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListArgs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListArgs) ProtoMessage() {}

func (x *ListArgs) ProtoReflect() protoreflect.Message {
	mi := &file_task_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListArgs.ProtoReflect.Descriptor instead.
func (*ListArgs) Descriptor() ([]byte, []int) {
	return file_task_proto_rawDescGZIP(), []int{0}
}

func (x *ListArgs) GetRoot() string {
	if x != nil {
		return x.Root
	}
	return ""
}

func (x *ListArgs) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

type ListResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Containers []*Container `protobuf:"bytes,1,rep,name=containers,proto3" json:"containers,omitempty"`
}

func (x *ListResp) Reset() {
	*x = ListResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_task_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListResp) ProtoMessage() {}

func (x *ListResp) ProtoReflect() protoreflect.Message {
	mi := &file_task_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListResp.ProtoReflect.Descriptor instead.
func (*ListResp) Descriptor() ([]byte, []int) {
	return file_task_proto_rawDescGZIP(), []int{1}
}

func (x *ListResp) GetContainers() []*Container {
	if x != nil {
		return x.Containers
	}
	return nil
}

type Container struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ContainerName    string `protobuf:"bytes,1,opt,name=ContainerName,proto3" json:"ContainerName,omitempty"`
	ImageName        string `protobuf:"bytes,2,opt,name=ImageName,proto3" json:"ImageName,omitempty"`
	SandboxId        string `protobuf:"bytes,3,opt,name=SandboxId,proto3" json:"SandboxId,omitempty"`
	SandboxName      string `protobuf:"bytes,4,opt,name=SandboxName,proto3" json:"SandboxName,omitempty"`
	SandboxNamespace string `protobuf:"bytes,5,opt,name=SandboxNamespace,proto3" json:"SandboxNamespace,omitempty"`
	SandboxUid       string `protobuf:"bytes,6,opt,name=SandboxUid,proto3" json:"SandboxUid,omitempty"`
}

func (x *Container) Reset() {
	*x = Container{}
	if protoimpl.UnsafeEnabled {
		mi := &file_task_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Container) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Container) ProtoMessage() {}

func (x *Container) ProtoReflect() protoreflect.Message {
	mi := &file_task_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Container.ProtoReflect.Descriptor instead.
func (*Container) Descriptor() ([]byte, []int) {
	return file_task_proto_rawDescGZIP(), []int{2}
}

func (x *Container) GetContainerName() string {
	if x != nil {
		return x.ContainerName
	}
	return ""
}

func (x *Container) GetImageName() string {
	if x != nil {
		return x.ImageName
	}
	return ""
}

func (x *Container) GetSandboxId() string {
	if x != nil {
		return x.SandboxId
	}
	return ""
}

func (x *Container) GetSandboxName() string {
	if x != nil {
		return x.SandboxName
	}
	return ""
}

func (x *Container) GetSandboxNamespace() string {
	if x != nil {
		return x.SandboxNamespace
	}
	return ""
}

func (x *Container) GetSandboxUid() string {
	if x != nil {
		return x.SandboxUid
	}
	return ""
}

type Annotation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Annotations map[string]string `protobuf:"bytes,1,rep,name=Annotations,proto3" json:"Annotations,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *Annotation) Reset() {
	*x = Annotation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_task_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Annotation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Annotation) ProtoMessage() {}

func (x *Annotation) ProtoReflect() protoreflect.Message {
	mi := &file_task_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Annotation.ProtoReflect.Descriptor instead.
func (*Annotation) Descriptor() ([]byte, []int) {
	return file_task_proto_rawDescGZIP(), []int{3}
}

func (x *Annotation) GetAnnotations() map[string]string {
	if x != nil {
		return x.Annotations
	}
	return nil
}

type External struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	String_ []string `protobuf:"bytes,1,rep,name=String,proto3" json:"String,omitempty"`
}

func (x *External) Reset() {
	*x = External{}
	if protoimpl.UnsafeEnabled {
		mi := &file_task_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *External) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*External) ProtoMessage() {}

func (x *External) ProtoReflect() protoreflect.Message {
	mi := &file_task_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use External.ProtoReflect.Descriptor instead.
func (*External) Descriptor() ([]byte, []int) {
	return file_task_proto_rawDescGZIP(), []int{4}
}

func (x *External) GetString_() []string {
	if x != nil {
		return x.String_
	}
	return nil
}

type DumpArgs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PID   int32             `protobuf:"varint,1,opt,name=PID,proto3" json:"PID,omitempty"`
	Dir   string            `protobuf:"bytes,2,opt,name=Dir,proto3" json:"Dir,omitempty"`
	Type  DumpArgs_DumpType `protobuf:"varint,3,opt,name=Type,proto3,enum=cedana.services.task.DumpArgs_DumpType" json:"Type,omitempty"`
	JobID string            `protobuf:"bytes,4,opt,name=JobID,proto3" json:"JobID,omitempty"`
}

func (x *DumpArgs) Reset() {
	*x = DumpArgs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_task_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DumpArgs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DumpArgs) ProtoMessage() {}

func (x *DumpArgs) ProtoReflect() protoreflect.Message {
	mi := &file_task_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DumpArgs.ProtoReflect.Descriptor instead.
func (*DumpArgs) Descriptor() ([]byte, []int) {
	return file_task_proto_rawDescGZIP(), []int{5}
}

func (x *DumpArgs) GetPID() int32 {
	if x != nil {
		return x.PID
	}
	return 0
}

func (x *DumpArgs) GetDir() string {
	if x != nil {
		return x.Dir
	}
	return ""
}

func (x *DumpArgs) GetType() DumpArgs_DumpType {
	if x != nil {
		return x.Type
	}
	return DumpArgs_LOCAL
}

func (x *DumpArgs) GetJobID() string {
	if x != nil {
		return x.JobID
	}
	return ""
}

type DumpResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Message      string `protobuf:"bytes,1,opt,name=Message,proto3" json:"Message,omitempty"`
	CheckpointID string `protobuf:"bytes,2,opt,name=CheckpointID,proto3" json:"CheckpointID,omitempty"`
	UploadID     string `protobuf:"bytes,3,opt,name=UploadID,proto3" json:"UploadID,omitempty"`
}

func (x *DumpResp) Reset() {
	*x = DumpResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_task_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DumpResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DumpResp) ProtoMessage() {}

func (x *DumpResp) ProtoReflect() protoreflect.Message {
	mi := &file_task_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DumpResp.ProtoReflect.Descriptor instead.
func (*DumpResp) Descriptor() ([]byte, []int) {
	return file_task_proto_rawDescGZIP(), []int{6}
}

func (x *DumpResp) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *DumpResp) GetCheckpointID() string {
	if x != nil {
		return x.CheckpointID
	}
	return ""
}

func (x *DumpResp) GetUploadID() string {
	if x != nil {
		return x.UploadID
	}
	return ""
}

type RestoreArgs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type           RestoreArgs_RestoreType `protobuf:"varint,1,opt,name=Type,proto3,enum=cedana.services.task.RestoreArgs_RestoreType" json:"Type,omitempty"`
	CheckpointId   string                  `protobuf:"bytes,2,opt,name=CheckpointId,proto3" json:"CheckpointId,omitempty"`
	CheckpointPath string                  `protobuf:"bytes,3,opt,name=CheckpointPath,proto3" json:"CheckpointPath,omitempty"`
	JobID          string                  `protobuf:"bytes,4,opt,name=JobID,proto3" json:"JobID,omitempty"`
	UID            uint32                  `protobuf:"varint,5,opt,name=UID,proto3" json:"UID,omitempty"`
	GID            uint32                  `protobuf:"varint,6,opt,name=GID,proto3" json:"GID,omitempty"`
}

func (x *RestoreArgs) Reset() {
	*x = RestoreArgs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_task_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RestoreArgs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RestoreArgs) ProtoMessage() {}

func (x *RestoreArgs) ProtoReflect() protoreflect.Message {
	mi := &file_task_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RestoreArgs.ProtoReflect.Descriptor instead.
func (*RestoreArgs) Descriptor() ([]byte, []int) {
	return file_task_proto_rawDescGZIP(), []int{7}
}

func (x *RestoreArgs) GetType() RestoreArgs_RestoreType {
	if x != nil {
		return x.Type
	}
	return RestoreArgs_LOCAL
}

func (x *RestoreArgs) GetCheckpointId() string {
	if x != nil {
		return x.CheckpointId
	}
	return ""
}

func (x *RestoreArgs) GetCheckpointPath() string {
	if x != nil {
		return x.CheckpointPath
	}
	return ""
}

func (x *RestoreArgs) GetJobID() string {
	if x != nil {
		return x.JobID
	}
	return ""
}

func (x *RestoreArgs) GetUID() uint32 {
	if x != nil {
		return x.UID
	}
	return 0
}

func (x *RestoreArgs) GetGID() uint32 {
	if x != nil {
		return x.GID
	}
	return 0
}

type RestoreResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Message string `protobuf:"bytes,1,opt,name=Message,proto3" json:"Message,omitempty"`
	NewPID  int32  `protobuf:"varint,2,opt,name=NewPID,proto3" json:"NewPID,omitempty"`
}

func (x *RestoreResp) Reset() {
	*x = RestoreResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_task_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RestoreResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RestoreResp) ProtoMessage() {}

func (x *RestoreResp) ProtoReflect() protoreflect.Message {
	mi := &file_task_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RestoreResp.ProtoReflect.Descriptor instead.
func (*RestoreResp) Descriptor() ([]byte, []int) {
	return file_task_proto_rawDescGZIP(), []int{8}
}

func (x *RestoreResp) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *RestoreResp) GetNewPID() int32 {
	if x != nil {
		return x.NewPID
	}
	return 0
}

type StartTaskArgs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Task          string   `protobuf:"bytes,1,opt,name=Task,proto3" json:"Task,omitempty"`
	Id            string   `protobuf:"bytes,2,opt,name=Id,proto3" json:"Id,omitempty"`
	WorkingDir    string   `protobuf:"bytes,3,opt,name=WorkingDir,proto3" json:"WorkingDir,omitempty"`
	Env           []string `protobuf:"bytes,4,rep,name=Env,proto3" json:"Env,omitempty"`
	LogOutputFile string   `protobuf:"bytes,5,opt,name=LogOutputFile,proto3" json:"LogOutputFile,omitempty"`
	UID           uint32   `protobuf:"varint,6,opt,name=UID,proto3" json:"UID,omitempty"`
	GID           uint32   `protobuf:"varint,7,opt,name=GID,proto3" json:"GID,omitempty"`
}

func (x *StartTaskArgs) Reset() {
	*x = StartTaskArgs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_task_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StartTaskArgs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StartTaskArgs) ProtoMessage() {}

func (x *StartTaskArgs) ProtoReflect() protoreflect.Message {
	mi := &file_task_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StartTaskArgs.ProtoReflect.Descriptor instead.
func (*StartTaskArgs) Descriptor() ([]byte, []int) {
	return file_task_proto_rawDescGZIP(), []int{9}
}

func (x *StartTaskArgs) GetTask() string {
	if x != nil {
		return x.Task
	}
	return ""
}

func (x *StartTaskArgs) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *StartTaskArgs) GetWorkingDir() string {
	if x != nil {
		return x.WorkingDir
	}
	return ""
}

func (x *StartTaskArgs) GetEnv() []string {
	if x != nil {
		return x.Env
	}
	return nil
}

func (x *StartTaskArgs) GetLogOutputFile() string {
	if x != nil {
		return x.LogOutputFile
	}
	return ""
}

func (x *StartTaskArgs) GetUID() uint32 {
	if x != nil {
		return x.UID
	}
	return 0
}

func (x *StartTaskArgs) GetGID() uint32 {
	if x != nil {
		return x.GID
	}
	return 0
}

type StartTaskResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Message string `protobuf:"bytes,1,opt,name=Message,proto3" json:"Message,omitempty"`
	PID     int32  `protobuf:"varint,2,opt,name=PID,proto3" json:"PID,omitempty"`
}

func (x *StartTaskResp) Reset() {
	*x = StartTaskResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_task_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StartTaskResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StartTaskResp) ProtoMessage() {}

func (x *StartTaskResp) ProtoReflect() protoreflect.Message {
	mi := &file_task_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StartTaskResp.ProtoReflect.Descriptor instead.
func (*StartTaskResp) Descriptor() ([]byte, []int) {
	return file_task_proto_rawDescGZIP(), []int{10}
}

func (x *StartTaskResp) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *StartTaskResp) GetPID() int32 {
	if x != nil {
		return x.PID
	}
	return 0
}

// Log Streaming args
type LogStreamingArgs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Timestamp string `protobuf:"bytes,1,opt,name=Timestamp,proto3" json:"Timestamp,omitempty"`
	Source    string `protobuf:"bytes,2,opt,name=Source,proto3" json:"Source,omitempty"`
	Level     string `protobuf:"bytes,3,opt,name=Level,proto3" json:"Level,omitempty"`
	Msg       string `protobuf:"bytes,4,opt,name=Msg,proto3" json:"Msg,omitempty"`
}

func (x *LogStreamingArgs) Reset() {
	*x = LogStreamingArgs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_task_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LogStreamingArgs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LogStreamingArgs) ProtoMessage() {}

func (x *LogStreamingArgs) ProtoReflect() protoreflect.Message {
	mi := &file_task_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LogStreamingArgs.ProtoReflect.Descriptor instead.
func (*LogStreamingArgs) Descriptor() ([]byte, []int) {
	return file_task_proto_rawDescGZIP(), []int{11}
}

func (x *LogStreamingArgs) GetTimestamp() string {
	if x != nil {
		return x.Timestamp
	}
	return ""
}

func (x *LogStreamingArgs) GetSource() string {
	if x != nil {
		return x.Source
	}
	return ""
}

func (x *LogStreamingArgs) GetLevel() string {
	if x != nil {
		return x.Level
	}
	return ""
}

func (x *LogStreamingArgs) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

type LogStreamingResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status string `protobuf:"bytes,1,opt,name=Status,proto3" json:"Status,omitempty"`
}

func (x *LogStreamingResp) Reset() {
	*x = LogStreamingResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_task_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LogStreamingResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LogStreamingResp) ProtoMessage() {}

func (x *LogStreamingResp) ProtoReflect() protoreflect.Message {
	mi := &file_task_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LogStreamingResp.ProtoReflect.Descriptor instead.
func (*LogStreamingResp) Descriptor() ([]byte, []int) {
	return file_task_proto_rawDescGZIP(), []int{12}
}

func (x *LogStreamingResp) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

type ProcessState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PID              int32                             `protobuf:"varint,1,opt,name=PID,proto3" json:"PID,omitempty"`
	Task             string                            `protobuf:"bytes,2,opt,name=Task,proto3" json:"Task,omitempty"`
	ContainerRuntime ProcessState_ContainerRuntimeOpts `protobuf:"varint,3,opt,name=ContainerRuntime,proto3,enum=cedana.services.task.ProcessState_ContainerRuntimeOpts" json:"ContainerRuntime,omitempty"`
	ContainerId      string                            `protobuf:"bytes,4,opt,name=ContainerId,proto3" json:"ContainerId,omitempty"`
	StartedAt        string                            `protobuf:"bytes,5,opt,name=StartedAt,proto3" json:"StartedAt,omitempty"`
	ProcessInfo      *ProcessInfo                      `protobuf:"bytes,6,opt,name=ProcessInfo,proto3" json:"ProcessInfo,omitempty"`
	CheckpointPath   string                            `protobuf:"bytes,7,opt,name=CheckpointPath,proto3" json:"CheckpointPath,omitempty"`
	CheckpointState  CheckpointState                   `protobuf:"varint,8,opt,name=CheckpointState,proto3,enum=cedana.services.task.CheckpointState" json:"CheckpointState,omitempty"`
	Flag             FlagEnum                          `protobuf:"varint,9,opt,name=Flag,proto3,enum=cedana.services.task.FlagEnum" json:"Flag,omitempty"`
	RemoteState      []*RemoteState                    `protobuf:"bytes,10,rep,name=RemoteState,proto3" json:"RemoteState,omitempty"`
	GPUCheckpointed  bool                              `protobuf:"varint,11,opt,name=GPUCheckpointed,proto3" json:"GPUCheckpointed,omitempty"`
}

func (x *ProcessState) Reset() {
	*x = ProcessState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_task_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProcessState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProcessState) ProtoMessage() {}

func (x *ProcessState) ProtoReflect() protoreflect.Message {
	mi := &file_task_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProcessState.ProtoReflect.Descriptor instead.
func (*ProcessState) Descriptor() ([]byte, []int) {
	return file_task_proto_rawDescGZIP(), []int{13}
}

func (x *ProcessState) GetPID() int32 {
	if x != nil {
		return x.PID
	}
	return 0
}

func (x *ProcessState) GetTask() string {
	if x != nil {
		return x.Task
	}
	return ""
}

func (x *ProcessState) GetContainerRuntime() ProcessState_ContainerRuntimeOpts {
	if x != nil {
		return x.ContainerRuntime
	}
	return ProcessState_CONTAINERD
}

func (x *ProcessState) GetContainerId() string {
	if x != nil {
		return x.ContainerId
	}
	return ""
}

func (x *ProcessState) GetStartedAt() string {
	if x != nil {
		return x.StartedAt
	}
	return ""
}

func (x *ProcessState) GetProcessInfo() *ProcessInfo {
	if x != nil {
		return x.ProcessInfo
	}
	return nil
}

func (x *ProcessState) GetCheckpointPath() string {
	if x != nil {
		return x.CheckpointPath
	}
	return ""
}

func (x *ProcessState) GetCheckpointState() CheckpointState {
	if x != nil {
		return x.CheckpointState
	}
	return CheckpointState_CHECKPOINTED
}

func (x *ProcessState) GetFlag() FlagEnum {
	if x != nil {
		return x.Flag
	}
	return FlagEnum_JOB_STARTUP_FAILED
}

func (x *ProcessState) GetRemoteState() []*RemoteState {
	if x != nil {
		return x.RemoteState
	}
	return nil
}

func (x *ProcessState) GetGPUCheckpointed() bool {
	if x != nil {
		return x.GPUCheckpointed
	}
	return false
}

type RemoteState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CheckpointID string `protobuf:"bytes,1,opt,name=CheckpointID,proto3" json:"CheckpointID,omitempty"`
	UploadID     string `protobuf:"bytes,2,opt,name=UploadID,proto3" json:"UploadID,omitempty"`
	Timestamp    int64  `protobuf:"varint,3,opt,name=Timestamp,proto3" json:"Timestamp,omitempty"`
}

func (x *RemoteState) Reset() {
	*x = RemoteState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_task_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoteState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoteState) ProtoMessage() {}

func (x *RemoteState) ProtoReflect() protoreflect.Message {
	mi := &file_task_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoteState.ProtoReflect.Descriptor instead.
func (*RemoteState) Descriptor() ([]byte, []int) {
	return file_task_proto_rawDescGZIP(), []int{14}
}

func (x *RemoteState) GetCheckpointID() string {
	if x != nil {
		return x.CheckpointID
	}
	return ""
}

func (x *RemoteState) GetUploadID() string {
	if x != nil {
		return x.UploadID
	}
	return ""
}

func (x *RemoteState) GetTimestamp() int64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

type ClientInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id              string `protobuf:"bytes,1,opt,name=Id,proto3" json:"Id,omitempty"`
	Hostname        string `protobuf:"bytes,2,opt,name=Hostname,proto3" json:"Hostname,omitempty"`
	Platform        string `protobuf:"bytes,3,opt,name=Platform,proto3" json:"Platform,omitempty"`
	OS              string `protobuf:"bytes,4,opt,name=OS,proto3" json:"OS,omitempty"`
	Uptime          uint64 `protobuf:"varint,5,opt,name=Uptime,proto3" json:"Uptime,omitempty"`
	RemainingMemory uint64 `protobuf:"varint,6,opt,name=RemainingMemory,proto3" json:"RemainingMemory,omitempty"`
}

func (x *ClientInfo) Reset() {
	*x = ClientInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_task_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClientInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClientInfo) ProtoMessage() {}

func (x *ClientInfo) ProtoReflect() protoreflect.Message {
	mi := &file_task_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClientInfo.ProtoReflect.Descriptor instead.
func (*ClientInfo) Descriptor() ([]byte, []int) {
	return file_task_proto_rawDescGZIP(), []int{15}
}

func (x *ClientInfo) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ClientInfo) GetHostname() string {
	if x != nil {
		return x.Hostname
	}
	return ""
}

func (x *ClientInfo) GetPlatform() string {
	if x != nil {
		return x.Platform
	}
	return ""
}

func (x *ClientInfo) GetOS() string {
	if x != nil {
		return x.OS
	}
	return ""
}

func (x *ClientInfo) GetUptime() uint64 {
	if x != nil {
		return x.Uptime
	}
	return 0
}

func (x *ClientInfo) GetRemainingMemory() uint64 {
	if x != nil {
		return x.RemainingMemory
	}
	return 0
}

type ProcessInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PID                     int32             `protobuf:"varint,1,opt,name=PID,proto3" json:"PID,omitempty"`
	AttachedToHardwareAccel bool              `protobuf:"varint,2,opt,name=AttachedToHardwareAccel,proto3" json:"AttachedToHardwareAccel,omitempty"`
	OpenFds                 []*OpenFilesStat  `protobuf:"bytes,3,rep,name=OpenFds,proto3" json:"OpenFds,omitempty"`
	WorkingDir              string            `protobuf:"bytes,4,opt,name=WorkingDir,proto3" json:"WorkingDir,omitempty"`
	OpenConnections         []*ConnectionStat `protobuf:"bytes,5,rep,name=OpenConnections,proto3" json:"OpenConnections,omitempty"`
	MemoryPercent           float32           `protobuf:"fixed32,6,opt,name=MemoryPercent,proto3" json:"MemoryPercent,omitempty"`
	IsRunning               bool              `protobuf:"varint,7,opt,name=IsRunning,proto3" json:"IsRunning,omitempty"`
	Status                  string            `protobuf:"bytes,8,opt,name=Status,proto3" json:"Status,omitempty"`
}

func (x *ProcessInfo) Reset() {
	*x = ProcessInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_task_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProcessInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProcessInfo) ProtoMessage() {}

func (x *ProcessInfo) ProtoReflect() protoreflect.Message {
	mi := &file_task_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProcessInfo.ProtoReflect.Descriptor instead.
func (*ProcessInfo) Descriptor() ([]byte, []int) {
	return file_task_proto_rawDescGZIP(), []int{16}
}

func (x *ProcessInfo) GetPID() int32 {
	if x != nil {
		return x.PID
	}
	return 0
}

func (x *ProcessInfo) GetAttachedToHardwareAccel() bool {
	if x != nil {
		return x.AttachedToHardwareAccel
	}
	return false
}

func (x *ProcessInfo) GetOpenFds() []*OpenFilesStat {
	if x != nil {
		return x.OpenFds
	}
	return nil
}

func (x *ProcessInfo) GetWorkingDir() string {
	if x != nil {
		return x.WorkingDir
	}
	return ""
}

func (x *ProcessInfo) GetOpenConnections() []*ConnectionStat {
	if x != nil {
		return x.OpenConnections
	}
	return nil
}

func (x *ProcessInfo) GetMemoryPercent() float32 {
	if x != nil {
		return x.MemoryPercent
	}
	return 0
}

func (x *ProcessInfo) GetIsRunning() bool {
	if x != nil {
		return x.IsRunning
	}
	return false
}

func (x *ProcessInfo) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

type OpenFilesStat struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Path   string                   `protobuf:"bytes,1,opt,name=Path,proto3" json:"Path,omitempty"`
	Fd     uint64                   `protobuf:"varint,2,opt,name=Fd,proto3" json:"Fd,omitempty"`
	Mode   string                   `protobuf:"bytes,3,opt,name=Mode,proto3" json:"Mode,omitempty"`
	Stream OpenFilesStat_StreamType `protobuf:"varint,5,opt,name=Stream,proto3,enum=cedana.services.task.OpenFilesStat_StreamType" json:"Stream,omitempty"`
}

func (x *OpenFilesStat) Reset() {
	*x = OpenFilesStat{}
	if protoimpl.UnsafeEnabled {
		mi := &file_task_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OpenFilesStat) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OpenFilesStat) ProtoMessage() {}

func (x *OpenFilesStat) ProtoReflect() protoreflect.Message {
	mi := &file_task_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OpenFilesStat.ProtoReflect.Descriptor instead.
func (*OpenFilesStat) Descriptor() ([]byte, []int) {
	return file_task_proto_rawDescGZIP(), []int{17}
}

func (x *OpenFilesStat) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *OpenFilesStat) GetFd() uint64 {
	if x != nil {
		return x.Fd
	}
	return 0
}

func (x *OpenFilesStat) GetMode() string {
	if x != nil {
		return x.Mode
	}
	return ""
}

func (x *OpenFilesStat) GetStream() OpenFilesStat_StreamType {
	if x != nil {
		return x.Stream
	}
	return OpenFilesStat_STDIN
}

type ConnectionStat struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Fd     uint32  `protobuf:"varint,1,opt,name=Fd,proto3" json:"Fd,omitempty"`
	Family uint32  `protobuf:"varint,2,opt,name=Family,proto3" json:"Family,omitempty"`
	Type   uint32  `protobuf:"varint,3,opt,name=Type,proto3" json:"Type,omitempty"`
	Laddr  *Addr   `protobuf:"bytes,4,opt,name=Laddr,proto3" json:"Laddr,omitempty"`
	Raddr  *Addr   `protobuf:"bytes,5,opt,name=Raddr,proto3" json:"Raddr,omitempty"`
	Status string  `protobuf:"bytes,6,opt,name=Status,proto3" json:"Status,omitempty"`
	Uids   []int32 `protobuf:"varint,7,rep,packed,name=Uids,proto3" json:"Uids,omitempty"`
	PID    int32   `protobuf:"varint,8,opt,name=PID,proto3" json:"PID,omitempty"`
}

func (x *ConnectionStat) Reset() {
	*x = ConnectionStat{}
	if protoimpl.UnsafeEnabled {
		mi := &file_task_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConnectionStat) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConnectionStat) ProtoMessage() {}

func (x *ConnectionStat) ProtoReflect() protoreflect.Message {
	mi := &file_task_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConnectionStat.ProtoReflect.Descriptor instead.
func (*ConnectionStat) Descriptor() ([]byte, []int) {
	return file_task_proto_rawDescGZIP(), []int{18}
}

func (x *ConnectionStat) GetFd() uint32 {
	if x != nil {
		return x.Fd
	}
	return 0
}

func (x *ConnectionStat) GetFamily() uint32 {
	if x != nil {
		return x.Family
	}
	return 0
}

func (x *ConnectionStat) GetType() uint32 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *ConnectionStat) GetLaddr() *Addr {
	if x != nil {
		return x.Laddr
	}
	return nil
}

func (x *ConnectionStat) GetRaddr() *Addr {
	if x != nil {
		return x.Raddr
	}
	return nil
}

func (x *ConnectionStat) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *ConnectionStat) GetUids() []int32 {
	if x != nil {
		return x.Uids
	}
	return nil
}

func (x *ConnectionStat) GetPID() int32 {
	if x != nil {
		return x.PID
	}
	return 0
}

type Addr struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IP   string `protobuf:"bytes,1,opt,name=IP,proto3" json:"IP,omitempty"`
	Port uint32 `protobuf:"varint,2,opt,name=Port,proto3" json:"Port,omitempty"`
}

func (x *Addr) Reset() {
	*x = Addr{}
	if protoimpl.UnsafeEnabled {
		mi := &file_task_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Addr) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Addr) ProtoMessage() {}

func (x *Addr) ProtoReflect() protoreflect.Message {
	mi := &file_task_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Addr.ProtoReflect.Descriptor instead.
func (*Addr) Descriptor() ([]byte, []int) {
	return file_task_proto_rawDescGZIP(), []int{19}
}

func (x *Addr) GetIP() string {
	if x != nil {
		return x.IP
	}
	return ""
}

func (x *Addr) GetPort() uint32 {
	if x != nil {
		return x.Port
	}
	return 0
}

type ClientStateStreamingResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status string `protobuf:"bytes,1,opt,name=Status,proto3" json:"Status,omitempty"`
}

func (x *ClientStateStreamingResp) Reset() {
	*x = ClientStateStreamingResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_task_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClientStateStreamingResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClientStateStreamingResp) ProtoMessage() {}

func (x *ClientStateStreamingResp) ProtoReflect() protoreflect.Message {
	mi := &file_task_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClientStateStreamingResp.ProtoReflect.Descriptor instead.
func (*ClientStateStreamingResp) Descriptor() ([]byte, []int) {
	return file_task_proto_rawDescGZIP(), []int{20}
}

func (x *ClientStateStreamingResp) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

type MetaStateStreamingArgs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Event            *ProviderEvent    `protobuf:"bytes,1,opt,name=Event,proto3" json:"Event,omitempty"`
	CheckpointReason *CheckpointReason `protobuf:"bytes,2,opt,name=CheckpointReason,proto3" json:"CheckpointReason,omitempty"`
}

func (x *MetaStateStreamingArgs) Reset() {
	*x = MetaStateStreamingArgs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_task_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MetaStateStreamingArgs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MetaStateStreamingArgs) ProtoMessage() {}

func (x *MetaStateStreamingArgs) ProtoReflect() protoreflect.Message {
	mi := &file_task_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MetaStateStreamingArgs.ProtoReflect.Descriptor instead.
func (*MetaStateStreamingArgs) Descriptor() ([]byte, []int) {
	return file_task_proto_rawDescGZIP(), []int{21}
}

func (x *MetaStateStreamingArgs) GetEvent() *ProviderEvent {
	if x != nil {
		return x.Event
	}
	return nil
}

func (x *MetaStateStreamingArgs) GetCheckpointReason() *CheckpointReason {
	if x != nil {
		return x.CheckpointReason
	}
	return nil
}

type CheckpointReason struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Reason CheckpointReason_CheckpointReasonEnum `protobuf:"varint,1,opt,name=Reason,proto3,enum=cedana.services.task.CheckpointReason_CheckpointReasonEnum" json:"Reason,omitempty"`
}

func (x *CheckpointReason) Reset() {
	*x = CheckpointReason{}
	if protoimpl.UnsafeEnabled {
		mi := &file_task_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckpointReason) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckpointReason) ProtoMessage() {}

func (x *CheckpointReason) ProtoReflect() protoreflect.Message {
	mi := &file_task_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckpointReason.ProtoReflect.Descriptor instead.
func (*CheckpointReason) Descriptor() ([]byte, []int) {
	return file_task_proto_rawDescGZIP(), []int{22}
}

func (x *CheckpointReason) GetReason() CheckpointReason_CheckpointReasonEnum {
	if x != nil {
		return x.Reason
	}
	return CheckpointReason_INSTANCE_TERMINATION
}

type ProviderEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InstanceID           string `protobuf:"bytes,1,opt,name=InstanceID,proto3" json:"InstanceID,omitempty"`
	FaultCode            string `protobuf:"bytes,2,opt,name=FaultCode,proto3" json:"FaultCode,omitempty"`
	MarkedForTermination bool   `protobuf:"varint,3,opt,name=MarkedForTermination,proto3" json:"MarkedForTermination,omitempty"`
	TerminationTime      int64  `protobuf:"varint,4,opt,name=TerminationTime,proto3" json:"TerminationTime,omitempty"`
}

func (x *ProviderEvent) Reset() {
	*x = ProviderEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_task_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProviderEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProviderEvent) ProtoMessage() {}

func (x *ProviderEvent) ProtoReflect() protoreflect.Message {
	mi := &file_task_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProviderEvent.ProtoReflect.Descriptor instead.
func (*ProviderEvent) Descriptor() ([]byte, []int) {
	return file_task_proto_rawDescGZIP(), []int{23}
}

func (x *ProviderEvent) GetInstanceID() string {
	if x != nil {
		return x.InstanceID
	}
	return ""
}

func (x *ProviderEvent) GetFaultCode() string {
	if x != nil {
		return x.FaultCode
	}
	return ""
}

func (x *ProviderEvent) GetMarkedForTermination() bool {
	if x != nil {
		return x.MarkedForTermination
	}
	return false
}

func (x *ProviderEvent) GetTerminationTime() int64 {
	if x != nil {
		return x.TerminationTime
	}
	return 0
}

type MetaStateStreamingResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status string `protobuf:"bytes,1,opt,name=Status,proto3" json:"Status,omitempty"`
}

func (x *MetaStateStreamingResp) Reset() {
	*x = MetaStateStreamingResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_task_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MetaStateStreamingResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MetaStateStreamingResp) ProtoMessage() {}

func (x *MetaStateStreamingResp) ProtoReflect() protoreflect.Message {
	mi := &file_task_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MetaStateStreamingResp.ProtoReflect.Descriptor instead.
func (*MetaStateStreamingResp) Descriptor() ([]byte, []int) {
	return file_task_proto_rawDescGZIP(), []int{24}
}

func (x *MetaStateStreamingResp) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

type PausePidArgs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BundlePath string `protobuf:"bytes,1,opt,name=BundlePath,proto3" json:"BundlePath,omitempty"`
}

func (x *PausePidArgs) Reset() {
	*x = PausePidArgs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_task_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PausePidArgs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PausePidArgs) ProtoMessage() {}

func (x *PausePidArgs) ProtoReflect() protoreflect.Message {
	mi := &file_task_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PausePidArgs.ProtoReflect.Descriptor instead.
func (*PausePidArgs) Descriptor() ([]byte, []int) {
	return file_task_proto_rawDescGZIP(), []int{25}
}

func (x *PausePidArgs) GetBundlePath() string {
	if x != nil {
		return x.BundlePath
	}
	return ""
}

type PausePidResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PausePid int64 `protobuf:"varint,1,opt,name=PausePid,proto3" json:"PausePid,omitempty"`
}

func (x *PausePidResp) Reset() {
	*x = PausePidResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_task_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PausePidResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PausePidResp) ProtoMessage() {}

func (x *PausePidResp) ProtoReflect() protoreflect.Message {
	mi := &file_task_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PausePidResp.ProtoReflect.Descriptor instead.
func (*PausePidResp) Descriptor() ([]byte, []int) {
	return file_task_proto_rawDescGZIP(), []int{26}
}

func (x *PausePidResp) GetPausePid() int64 {
	if x != nil {
		return x.PausePid
	}
	return 0
}

type CtrByNameArgs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ContainerName string `protobuf:"bytes,1,opt,name=ContainerName,proto3" json:"ContainerName,omitempty"`
	SandboxName   string `protobuf:"bytes,2,opt,name=SandboxName,proto3" json:"SandboxName,omitempty"`
	Root          string `protobuf:"bytes,3,opt,name=Root,proto3" json:"Root,omitempty"`
}

func (x *CtrByNameArgs) Reset() {
	*x = CtrByNameArgs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_task_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CtrByNameArgs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CtrByNameArgs) ProtoMessage() {}

func (x *CtrByNameArgs) ProtoReflect() protoreflect.Message {
	mi := &file_task_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CtrByNameArgs.ProtoReflect.Descriptor instead.
func (*CtrByNameArgs) Descriptor() ([]byte, []int) {
	return file_task_proto_rawDescGZIP(), []int{27}
}

func (x *CtrByNameArgs) GetContainerName() string {
	if x != nil {
		return x.ContainerName
	}
	return ""
}

func (x *CtrByNameArgs) GetSandboxName() string {
	if x != nil {
		return x.SandboxName
	}
	return ""
}

func (x *CtrByNameArgs) GetRoot() string {
	if x != nil {
		return x.Root
	}
	return ""
}

type CtrByNameResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RuncContainerName string `protobuf:"bytes,1,opt,name=RuncContainerName,proto3" json:"RuncContainerName,omitempty"`
	RuncBundlePath    string `protobuf:"bytes,2,opt,name=RuncBundlePath,proto3" json:"RuncBundlePath,omitempty"`
}

func (x *CtrByNameResp) Reset() {
	*x = CtrByNameResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_task_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CtrByNameResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CtrByNameResp) ProtoMessage() {}

func (x *CtrByNameResp) ProtoReflect() protoreflect.Message {
	mi := &file_task_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CtrByNameResp.ProtoReflect.Descriptor instead.
func (*CtrByNameResp) Descriptor() ([]byte, []int) {
	return file_task_proto_rawDescGZIP(), []int{28}
}

func (x *CtrByNameResp) GetRuncContainerName() string {
	if x != nil {
		return x.RuncContainerName
	}
	return ""
}

func (x *CtrByNameResp) GetRuncBundlePath() string {
	if x != nil {
		return x.RuncBundlePath
	}
	return ""
}

type RuncRoot struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Root string `protobuf:"bytes,1,opt,name=Root,proto3" json:"Root,omitempty"`
}

func (x *RuncRoot) Reset() {
	*x = RuncRoot{}
	if protoimpl.UnsafeEnabled {
		mi := &file_task_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RuncRoot) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RuncRoot) ProtoMessage() {}

func (x *RuncRoot) ProtoReflect() protoreflect.Message {
	mi := &file_task_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RuncRoot.ProtoReflect.Descriptor instead.
func (*RuncRoot) Descriptor() ([]byte, []int) {
	return file_task_proto_rawDescGZIP(), []int{29}
}

func (x *RuncRoot) GetRoot() string {
	if x != nil {
		return x.Root
	}
	return ""
}

type RuncList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Containers []string `protobuf:"bytes,1,rep,name=Containers,proto3" json:"Containers,omitempty"`
}

func (x *RuncList) Reset() {
	*x = RuncList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_task_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RuncList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RuncList) ProtoMessage() {}

func (x *RuncList) ProtoReflect() protoreflect.Message {
	mi := &file_task_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RuncList.ProtoReflect.Descriptor instead.
func (*RuncList) Descriptor() ([]byte, []int) {
	return file_task_proto_rawDescGZIP(), []int{30}
}

func (x *RuncList) GetContainers() []string {
	if x != nil {
		return x.Containers
	}
	return nil
}

type ContainerDumpArgs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ContainerId string `protobuf:"bytes,1,opt,name=ContainerId,proto3" json:"ContainerId,omitempty"`
	Ref         string `protobuf:"bytes,2,opt,name=Ref,proto3" json:"Ref,omitempty"`
}

func (x *ContainerDumpArgs) Reset() {
	*x = ContainerDumpArgs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_task_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ContainerDumpArgs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContainerDumpArgs) ProtoMessage() {}

func (x *ContainerDumpArgs) ProtoReflect() protoreflect.Message {
	mi := &file_task_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContainerDumpArgs.ProtoReflect.Descriptor instead.
func (*ContainerDumpArgs) Descriptor() ([]byte, []int) {
	return file_task_proto_rawDescGZIP(), []int{31}
}

func (x *ContainerDumpArgs) GetContainerId() string {
	if x != nil {
		return x.ContainerId
	}
	return ""
}

func (x *ContainerDumpArgs) GetRef() string {
	if x != nil {
		return x.Ref
	}
	return ""
}

type ContainerDumpResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CheckpointPath string `protobuf:"bytes,1,opt,name=CheckpointPath,proto3" json:"CheckpointPath,omitempty"`
	Message        string `protobuf:"bytes,2,opt,name=Message,proto3" json:"Message,omitempty"`
}

func (x *ContainerDumpResp) Reset() {
	*x = ContainerDumpResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_task_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ContainerDumpResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContainerDumpResp) ProtoMessage() {}

func (x *ContainerDumpResp) ProtoReflect() protoreflect.Message {
	mi := &file_task_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContainerDumpResp.ProtoReflect.Descriptor instead.
func (*ContainerDumpResp) Descriptor() ([]byte, []int) {
	return file_task_proto_rawDescGZIP(), []int{32}
}

func (x *ContainerDumpResp) GetCheckpointPath() string {
	if x != nil {
		return x.CheckpointPath
	}
	return ""
}

func (x *ContainerDumpResp) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type ContainerRestoreArgs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ImgPath     string `protobuf:"bytes,1,opt,name=ImgPath,proto3" json:"ImgPath,omitempty"`
	ContainerId string `protobuf:"bytes,2,opt,name=ContainerId,proto3" json:"ContainerId,omitempty"`
}

func (x *ContainerRestoreArgs) Reset() {
	*x = ContainerRestoreArgs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_task_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ContainerRestoreArgs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContainerRestoreArgs) ProtoMessage() {}

func (x *ContainerRestoreArgs) ProtoReflect() protoreflect.Message {
	mi := &file_task_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContainerRestoreArgs.ProtoReflect.Descriptor instead.
func (*ContainerRestoreArgs) Descriptor() ([]byte, []int) {
	return file_task_proto_rawDescGZIP(), []int{33}
}

func (x *ContainerRestoreArgs) GetImgPath() string {
	if x != nil {
		return x.ImgPath
	}
	return ""
}

func (x *ContainerRestoreArgs) GetContainerId() string {
	if x != nil {
		return x.ContainerId
	}
	return ""
}

type ContainerRestoreResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Message string `protobuf:"bytes,1,opt,name=Message,proto3" json:"Message,omitempty"`
}

func (x *ContainerRestoreResp) Reset() {
	*x = ContainerRestoreResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_task_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ContainerRestoreResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContainerRestoreResp) ProtoMessage() {}

func (x *ContainerRestoreResp) ProtoReflect() protoreflect.Message {
	mi := &file_task_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContainerRestoreResp.ProtoReflect.Descriptor instead.
func (*ContainerRestoreResp) Descriptor() ([]byte, []int) {
	return file_task_proto_rawDescGZIP(), []int{34}
}

func (x *ContainerRestoreResp) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type RuncDumpArgs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Root           string                `protobuf:"bytes,1,opt,name=Root,proto3" json:"Root,omitempty"`
	CheckpointPath string                `protobuf:"bytes,2,opt,name=CheckpointPath,proto3" json:"CheckpointPath,omitempty"`
	ContainerId    string                `protobuf:"bytes,3,opt,name=ContainerId,proto3" json:"ContainerId,omitempty"`
	CriuOpts       *CriuOpts             `protobuf:"bytes,4,opt,name=CriuOpts,proto3" json:"CriuOpts,omitempty"`
	Type           RuncDumpArgs_DumpType `protobuf:"varint,5,opt,name=Type,proto3,enum=cedana.services.task.RuncDumpArgs_DumpType" json:"Type,omitempty"`
	JobID          string                `protobuf:"bytes,6,opt,name=JobID,proto3" json:"JobID,omitempty"`
}

func (x *RuncDumpArgs) Reset() {
	*x = RuncDumpArgs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_task_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RuncDumpArgs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RuncDumpArgs) ProtoMessage() {}

func (x *RuncDumpArgs) ProtoReflect() protoreflect.Message {
	mi := &file_task_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RuncDumpArgs.ProtoReflect.Descriptor instead.
func (*RuncDumpArgs) Descriptor() ([]byte, []int) {
	return file_task_proto_rawDescGZIP(), []int{35}
}

func (x *RuncDumpArgs) GetRoot() string {
	if x != nil {
		return x.Root
	}
	return ""
}

func (x *RuncDumpArgs) GetCheckpointPath() string {
	if x != nil {
		return x.CheckpointPath
	}
	return ""
}

func (x *RuncDumpArgs) GetContainerId() string {
	if x != nil {
		return x.ContainerId
	}
	return ""
}

func (x *RuncDumpArgs) GetCriuOpts() *CriuOpts {
	if x != nil {
		return x.CriuOpts
	}
	return nil
}

func (x *RuncDumpArgs) GetType() RuncDumpArgs_DumpType {
	if x != nil {
		return x.Type
	}
	return RuncDumpArgs_LOCAL
}

func (x *RuncDumpArgs) GetJobID() string {
	if x != nil {
		return x.JobID
	}
	return ""
}

type RuncDumpResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Message      string `protobuf:"bytes,1,opt,name=Message,proto3" json:"Message,omitempty"`
	CheckpointId string `protobuf:"bytes,2,opt,name=CheckpointId,proto3" json:"CheckpointId,omitempty"`
}

func (x *RuncDumpResp) Reset() {
	*x = RuncDumpResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_task_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RuncDumpResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RuncDumpResp) ProtoMessage() {}

func (x *RuncDumpResp) ProtoReflect() protoreflect.Message {
	mi := &file_task_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RuncDumpResp.ProtoReflect.Descriptor instead.
func (*RuncDumpResp) Descriptor() ([]byte, []int) {
	return file_task_proto_rawDescGZIP(), []int{36}
}

func (x *RuncDumpResp) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *RuncDumpResp) GetCheckpointId() string {
	if x != nil {
		return x.CheckpointId
	}
	return ""
}

type CriuOpts struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ImagesDirectory         string `protobuf:"bytes,1,opt,name=ImagesDirectory,proto3" json:"ImagesDirectory,omitempty"`
	WorkDirectory           string `protobuf:"bytes,2,opt,name=WorkDirectory,proto3" json:"WorkDirectory,omitempty"`
	ParentImage             string `protobuf:"bytes,3,opt,name=ParentImage,proto3" json:"ParentImage,omitempty"`
	LeaveRunning            bool   `protobuf:"varint,4,opt,name=LeaveRunning,proto3" json:"LeaveRunning,omitempty"`
	TcpEstablished          bool   `protobuf:"varint,5,opt,name=TcpEstablished,proto3" json:"TcpEstablished,omitempty"`
	ExternalUnixConnections bool   `protobuf:"varint,6,opt,name=ExternalUnixConnections,proto3" json:"ExternalUnixConnections,omitempty"`
	ShellJob                bool   `protobuf:"varint,7,opt,name=ShellJob,proto3" json:"ShellJob,omitempty"`
	FileLocks               bool   `protobuf:"varint,8,opt,name=FileLocks,proto3" json:"FileLocks,omitempty"`
	PreDump                 bool   `protobuf:"varint,9,opt,name=PreDump,proto3" json:"PreDump,omitempty"`
	EmptyNs                 uint32 `protobuf:"varint,12,opt,name=EmptyNs,proto3" json:"EmptyNs,omitempty"`
	AutoDedup               bool   `protobuf:"varint,13,opt,name=AutoDedup,proto3" json:"AutoDedup,omitempty"`
	LazyPages               bool   `protobuf:"varint,14,opt,name=LazyPages,proto3" json:"LazyPages,omitempty"`
	StatusFd                int32  `protobuf:"varint,15,opt,name=StatusFd,proto3" json:"StatusFd,omitempty"`
	LsmProfile              string `protobuf:"bytes,16,opt,name=LsmProfile,proto3" json:"LsmProfile,omitempty"`
	LsmMountContext         string `protobuf:"bytes,17,opt,name=LsmMountContext,proto3" json:"LsmMountContext,omitempty"`
}

func (x *CriuOpts) Reset() {
	*x = CriuOpts{}
	if protoimpl.UnsafeEnabled {
		mi := &file_task_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CriuOpts) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CriuOpts) ProtoMessage() {}

func (x *CriuOpts) ProtoReflect() protoreflect.Message {
	mi := &file_task_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CriuOpts.ProtoReflect.Descriptor instead.
func (*CriuOpts) Descriptor() ([]byte, []int) {
	return file_task_proto_rawDescGZIP(), []int{37}
}

func (x *CriuOpts) GetImagesDirectory() string {
	if x != nil {
		return x.ImagesDirectory
	}
	return ""
}

func (x *CriuOpts) GetWorkDirectory() string {
	if x != nil {
		return x.WorkDirectory
	}
	return ""
}

func (x *CriuOpts) GetParentImage() string {
	if x != nil {
		return x.ParentImage
	}
	return ""
}

func (x *CriuOpts) GetLeaveRunning() bool {
	if x != nil {
		return x.LeaveRunning
	}
	return false
}

func (x *CriuOpts) GetTcpEstablished() bool {
	if x != nil {
		return x.TcpEstablished
	}
	return false
}

func (x *CriuOpts) GetExternalUnixConnections() bool {
	if x != nil {
		return x.ExternalUnixConnections
	}
	return false
}

func (x *CriuOpts) GetShellJob() bool {
	if x != nil {
		return x.ShellJob
	}
	return false
}

func (x *CriuOpts) GetFileLocks() bool {
	if x != nil {
		return x.FileLocks
	}
	return false
}

func (x *CriuOpts) GetPreDump() bool {
	if x != nil {
		return x.PreDump
	}
	return false
}

func (x *CriuOpts) GetEmptyNs() uint32 {
	if x != nil {
		return x.EmptyNs
	}
	return 0
}

func (x *CriuOpts) GetAutoDedup() bool {
	if x != nil {
		return x.AutoDedup
	}
	return false
}

func (x *CriuOpts) GetLazyPages() bool {
	if x != nil {
		return x.LazyPages
	}
	return false
}

func (x *CriuOpts) GetStatusFd() int32 {
	if x != nil {
		return x.StatusFd
	}
	return 0
}

func (x *CriuOpts) GetLsmProfile() string {
	if x != nil {
		return x.LsmProfile
	}
	return ""
}

func (x *CriuOpts) GetLsmMountContext() string {
	if x != nil {
		return x.LsmMountContext
	}
	return ""
}

type RuncRestoreArgs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ContainerId  string                      `protobuf:"bytes,1,opt,name=ContainerId,proto3" json:"ContainerId,omitempty"`
	ImagePath    string                      `protobuf:"bytes,2,opt,name=ImagePath,proto3" json:"ImagePath,omitempty"`
	IsK3S        bool                        `protobuf:"varint,3,opt,name=IsK3s,proto3" json:"IsK3s,omitempty"`
	Opts         *RuncOpts                   `protobuf:"bytes,4,opt,name=Opts,proto3" json:"Opts,omitempty"`
	Type         RuncRestoreArgs_RestoreType `protobuf:"varint,5,opt,name=Type,proto3,enum=cedana.services.task.RuncRestoreArgs_RestoreType" json:"Type,omitempty"`
	CheckpointId string                      `protobuf:"bytes,6,opt,name=CheckpointId,proto3" json:"CheckpointId,omitempty"`
}

func (x *RuncRestoreArgs) Reset() {
	*x = RuncRestoreArgs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_task_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RuncRestoreArgs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RuncRestoreArgs) ProtoMessage() {}

func (x *RuncRestoreArgs) ProtoReflect() protoreflect.Message {
	mi := &file_task_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RuncRestoreArgs.ProtoReflect.Descriptor instead.
func (*RuncRestoreArgs) Descriptor() ([]byte, []int) {
	return file_task_proto_rawDescGZIP(), []int{38}
}

func (x *RuncRestoreArgs) GetContainerId() string {
	if x != nil {
		return x.ContainerId
	}
	return ""
}

func (x *RuncRestoreArgs) GetImagePath() string {
	if x != nil {
		return x.ImagePath
	}
	return ""
}

func (x *RuncRestoreArgs) GetIsK3S() bool {
	if x != nil {
		return x.IsK3S
	}
	return false
}

func (x *RuncRestoreArgs) GetOpts() *RuncOpts {
	if x != nil {
		return x.Opts
	}
	return nil
}

func (x *RuncRestoreArgs) GetType() RuncRestoreArgs_RestoreType {
	if x != nil {
		return x.Type
	}
	return RuncRestoreArgs_LOCAL
}

func (x *RuncRestoreArgs) GetCheckpointId() string {
	if x != nil {
		return x.CheckpointId
	}
	return ""
}

type RuncOpts struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Root            string `protobuf:"bytes,1,opt,name=Root,proto3" json:"Root,omitempty"`
	ContainerId     string `protobuf:"bytes,2,opt,name=ContainerId,proto3" json:"ContainerId,omitempty"`
	Bundle          string `protobuf:"bytes,3,opt,name=Bundle,proto3" json:"Bundle,omitempty"`
	SystemdCgroup   bool   `protobuf:"varint,4,opt,name=SystemdCgroup,proto3" json:"SystemdCgroup,omitempty"`
	NoPivot         bool   `protobuf:"varint,5,opt,name=NoPivot,proto3" json:"NoPivot,omitempty"`
	NoMountFallback bool   `protobuf:"varint,6,opt,name=NoMountFallback,proto3" json:"NoMountFallback,omitempty"`
	NoNewKeyring    bool   `protobuf:"varint,7,opt,name=NoNewKeyring,proto3" json:"NoNewKeyring,omitempty"`
	Rootless        string `protobuf:"bytes,8,opt,name=Rootless,proto3" json:"Rootless,omitempty"`
	NoSubreaper     bool   `protobuf:"varint,9,opt,name=NoSubreaper,proto3" json:"NoSubreaper,omitempty"`
	Keep            bool   `protobuf:"varint,10,opt,name=Keep,proto3" json:"Keep,omitempty"`
	ConsoleSocket   string `protobuf:"bytes,11,opt,name=ConsoleSocket,proto3" json:"ConsoleSocket,omitempty"`
	Detatch         bool   `protobuf:"varint,12,opt,name=Detatch,proto3" json:"Detatch,omitempty"`
	PidFile         string `protobuf:"bytes,13,opt,name=PidFile,proto3" json:"PidFile,omitempty"`
	PreserveFds     int32  `protobuf:"varint,14,opt,name=PreserveFds,proto3" json:"PreserveFds,omitempty"`
	NetPid          int32  `protobuf:"varint,15,opt,name=NetPid,proto3" json:"NetPid,omitempty"`
}

func (x *RuncOpts) Reset() {
	*x = RuncOpts{}
	if protoimpl.UnsafeEnabled {
		mi := &file_task_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RuncOpts) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RuncOpts) ProtoMessage() {}

func (x *RuncOpts) ProtoReflect() protoreflect.Message {
	mi := &file_task_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RuncOpts.ProtoReflect.Descriptor instead.
func (*RuncOpts) Descriptor() ([]byte, []int) {
	return file_task_proto_rawDescGZIP(), []int{39}
}

func (x *RuncOpts) GetRoot() string {
	if x != nil {
		return x.Root
	}
	return ""
}

func (x *RuncOpts) GetContainerId() string {
	if x != nil {
		return x.ContainerId
	}
	return ""
}

func (x *RuncOpts) GetBundle() string {
	if x != nil {
		return x.Bundle
	}
	return ""
}

func (x *RuncOpts) GetSystemdCgroup() bool {
	if x != nil {
		return x.SystemdCgroup
	}
	return false
}

func (x *RuncOpts) GetNoPivot() bool {
	if x != nil {
		return x.NoPivot
	}
	return false
}

func (x *RuncOpts) GetNoMountFallback() bool {
	if x != nil {
		return x.NoMountFallback
	}
	return false
}

func (x *RuncOpts) GetNoNewKeyring() bool {
	if x != nil {
		return x.NoNewKeyring
	}
	return false
}

func (x *RuncOpts) GetRootless() string {
	if x != nil {
		return x.Rootless
	}
	return ""
}

func (x *RuncOpts) GetNoSubreaper() bool {
	if x != nil {
		return x.NoSubreaper
	}
	return false
}

func (x *RuncOpts) GetKeep() bool {
	if x != nil {
		return x.Keep
	}
	return false
}

func (x *RuncOpts) GetConsoleSocket() string {
	if x != nil {
		return x.ConsoleSocket
	}
	return ""
}

func (x *RuncOpts) GetDetatch() bool {
	if x != nil {
		return x.Detatch
	}
	return false
}

func (x *RuncOpts) GetPidFile() string {
	if x != nil {
		return x.PidFile
	}
	return ""
}

func (x *RuncOpts) GetPreserveFds() int32 {
	if x != nil {
		return x.PreserveFds
	}
	return 0
}

func (x *RuncOpts) GetNetPid() int32 {
	if x != nil {
		return x.NetPid
	}
	return 0
}

type RuncRestoreResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Message string `protobuf:"bytes,1,opt,name=Message,proto3" json:"Message,omitempty"`
}

func (x *RuncRestoreResp) Reset() {
	*x = RuncRestoreResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_task_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RuncRestoreResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RuncRestoreResp) ProtoMessage() {}

func (x *RuncRestoreResp) ProtoReflect() protoreflect.Message {
	mi := &file_task_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RuncRestoreResp.ProtoReflect.Descriptor instead.
func (*RuncRestoreResp) Descriptor() ([]byte, []int) {
	return file_task_proto_rawDescGZIP(), []int{40}
}

func (x *RuncRestoreResp) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

var File_task_proto protoreflect.FileDescriptor

var file_task_proto_rawDesc = []byte{
	0x0a, 0x0a, 0x74, 0x61, 0x73, 0x6b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x14, 0x63, 0x65,
	0x64, 0x61, 0x6e, 0x61, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x74, 0x61,
	0x73, 0x6b, 0x22, 0x3c, 0x0a, 0x08, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x72, 0x67, 0x73, 0x12, 0x12,
	0x0a, 0x04, 0x52, 0x6f, 0x6f, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x52, 0x6f,
	0x6f, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65,
	0x22, 0x4b, 0x0a, 0x08, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x3f, 0x0a, 0x0a,
	0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1f, 0x2e, 0x63, 0x65, 0x64, 0x61, 0x6e, 0x61, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x73, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65,
	0x72, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x73, 0x22, 0xdb, 0x01,
	0x0a, 0x09, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x12, 0x24, 0x0a, 0x0d, 0x43,
	0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0d, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x1c, 0x0a, 0x09, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x1c, 0x0a, 0x09, 0x53, 0x61, 0x6e, 0x64, 0x62, 0x6f, 0x78, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x53, 0x61, 0x6e, 0x64, 0x62, 0x6f, 0x78, 0x49, 0x64, 0x12, 0x20, 0x0a,
	0x0b, 0x53, 0x61, 0x6e, 0x64, 0x62, 0x6f, 0x78, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x53, 0x61, 0x6e, 0x64, 0x62, 0x6f, 0x78, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x2a, 0x0a, 0x10, 0x53, 0x61, 0x6e, 0x64, 0x62, 0x6f, 0x78, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70,
	0x61, 0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x53, 0x61, 0x6e, 0x64, 0x62,
	0x6f, 0x78, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x53,
	0x61, 0x6e, 0x64, 0x62, 0x6f, 0x78, 0x55, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x53, 0x61, 0x6e, 0x64, 0x62, 0x6f, 0x78, 0x55, 0x69, 0x64, 0x22, 0xa1, 0x01, 0x0a, 0x0a,
	0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x53, 0x0a, 0x0b, 0x41, 0x6e,
	0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x31, 0x2e, 0x63, 0x65, 0x64, 0x61, 0x6e, 0x61, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x73, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x2e, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x0b, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x1a,
	0x3e, 0x0a, 0x10, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22,
	0x22, 0x0a, 0x08, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x12, 0x16, 0x0a, 0x06, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x22, 0xa4, 0x01, 0x0a, 0x08, 0x44, 0x75, 0x6d, 0x70, 0x41, 0x72, 0x67, 0x73,
	0x12, 0x10, 0x0a, 0x03, 0x50, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x50,
	0x49, 0x44, 0x12, 0x10, 0x0a, 0x03, 0x44, 0x69, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x44, 0x69, 0x72, 0x12, 0x3b, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x27, 0x2e, 0x63, 0x65, 0x64, 0x61, 0x6e, 0x61, 0x2e, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x73, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x2e, 0x44, 0x75, 0x6d, 0x70, 0x41, 0x72,
	0x67, 0x73, 0x2e, 0x44, 0x75, 0x6d, 0x70, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x14, 0x0a, 0x05, 0x4a, 0x6f, 0x62, 0x49, 0x44, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x4a, 0x6f, 0x62, 0x49, 0x44, 0x22, 0x21, 0x0a, 0x08, 0x44, 0x75, 0x6d, 0x70, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x09, 0x0a, 0x05, 0x4c, 0x4f, 0x43, 0x41, 0x4c, 0x10, 0x00, 0x12, 0x0a,
	0x0a, 0x06, 0x52, 0x45, 0x4d, 0x4f, 0x54, 0x45, 0x10, 0x01, 0x22, 0x64, 0x0a, 0x08, 0x44, 0x75,
	0x6d, 0x70, 0x52, 0x65, 0x73, 0x70, 0x12, 0x18, 0x0a, 0x07, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x12, 0x22, 0x0a, 0x0c, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x49, 0x44,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x49, 0x44, 0x12, 0x1a, 0x0a, 0x08, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x49, 0x44,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x49, 0x44,
	0x22, 0xfc, 0x01, 0x0a, 0x0b, 0x52, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x41, 0x72, 0x67, 0x73,
	0x12, 0x41, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2d,
	0x2e, 0x63, 0x65, 0x64, 0x61, 0x6e, 0x61, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73,
	0x2e, 0x74, 0x61, 0x73, 0x6b, 0x2e, 0x52, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x41, 0x72, 0x67,
	0x73, 0x2e, 0x52, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x43, 0x68, 0x65, 0x63, 0x6b,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x0e, 0x43, 0x68, 0x65, 0x63, 0x6b,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x50, 0x61, 0x74, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x50, 0x61, 0x74, 0x68, 0x12,
	0x14, 0x0a, 0x05, 0x4a, 0x6f, 0x62, 0x49, 0x44, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x4a, 0x6f, 0x62, 0x49, 0x44, 0x12, 0x10, 0x0a, 0x03, 0x55, 0x49, 0x44, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x03, 0x55, 0x49, 0x44, 0x12, 0x10, 0x0a, 0x03, 0x47, 0x49, 0x44, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x47, 0x49, 0x44, 0x22, 0x24, 0x0a, 0x0b, 0x52, 0x65, 0x73,
	0x74, 0x6f, 0x72, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x09, 0x0a, 0x05, 0x4c, 0x4f, 0x43, 0x41,
	0x4c, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x52, 0x45, 0x4d, 0x4f, 0x54, 0x45, 0x10, 0x01, 0x22,
	0x3f, 0x0a, 0x0b, 0x52, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x52, 0x65, 0x73, 0x70, 0x12, 0x18,
	0x0a, 0x07, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x4e, 0x65, 0x77, 0x50,
	0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x4e, 0x65, 0x77, 0x50, 0x49, 0x44,
	0x22, 0xaf, 0x01, 0x0a, 0x0d, 0x53, 0x74, 0x61, 0x72, 0x74, 0x54, 0x61, 0x73, 0x6b, 0x41, 0x72,
	0x67, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x54, 0x61, 0x73, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x54, 0x61, 0x73, 0x6b, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x02, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x57, 0x6f, 0x72, 0x6b, 0x69, 0x6e,
	0x67, 0x44, 0x69, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x57, 0x6f, 0x72, 0x6b,
	0x69, 0x6e, 0x67, 0x44, 0x69, 0x72, 0x12, 0x10, 0x0a, 0x03, 0x45, 0x6e, 0x76, 0x18, 0x04, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x03, 0x45, 0x6e, 0x76, 0x12, 0x24, 0x0a, 0x0d, 0x4c, 0x6f, 0x67, 0x4f,
	0x75, 0x74, 0x70, 0x75, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0d, 0x4c, 0x6f, 0x67, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x10,
	0x0a, 0x03, 0x55, 0x49, 0x44, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x55, 0x49, 0x44,
	0x12, 0x10, 0x0a, 0x03, 0x47, 0x49, 0x44, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x47,
	0x49, 0x44, 0x22, 0x3b, 0x0a, 0x0d, 0x53, 0x74, 0x61, 0x72, 0x74, 0x54, 0x61, 0x73, 0x6b, 0x52,
	0x65, 0x73, 0x70, 0x12, 0x18, 0x0a, 0x07, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x10, 0x0a,
	0x03, 0x50, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x50, 0x49, 0x44, 0x22,
	0x70, 0x0a, 0x10, 0x4c, 0x6f, 0x67, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x41,
	0x72, 0x67, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x12, 0x16, 0x0a, 0x06, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x4c, 0x65, 0x76,
	0x65, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12,
	0x10, 0x0a, 0x03, 0x4d, 0x73, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x4d, 0x73,
	0x67, 0x22, 0x2a, 0x0a, 0x10, 0x4c, 0x6f, 0x67, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e,
	0x67, 0x52, 0x65, 0x73, 0x70, 0x12, 0x16, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0xec, 0x04,
	0x0a, 0x0c, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x10,
	0x0a, 0x03, 0x50, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x50, 0x49, 0x44,
	0x12, 0x12, 0x0a, 0x04, 0x54, 0x61, 0x73, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x54, 0x61, 0x73, 0x6b, 0x12, 0x63, 0x0a, 0x10, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65,
	0x72, 0x52, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x37,
	0x2e, 0x63, 0x65, 0x64, 0x61, 0x6e, 0x61, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73,
	0x2e, 0x74, 0x61, 0x73, 0x6b, 0x2e, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x52, 0x75, 0x6e, 0x74,
	0x69, 0x6d, 0x65, 0x4f, 0x70, 0x74, 0x73, 0x52, 0x10, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e,
	0x65, 0x72, 0x52, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x43, 0x6f, 0x6e,
	0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x53,
	0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x53, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x43, 0x0a, 0x0b, 0x50, 0x72, 0x6f,
	0x63, 0x65, 0x73, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21,
	0x2e, 0x63, 0x65, 0x64, 0x61, 0x6e, 0x61, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73,
	0x2e, 0x74, 0x61, 0x73, 0x6b, 0x2e, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x0b, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x26,
	0x0a, 0x0e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x50, 0x61, 0x74, 0x68,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x50, 0x61, 0x74, 0x68, 0x12, 0x4f, 0x0a, 0x0f, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x25, 0x2e, 0x63, 0x65, 0x64, 0x61, 0x6e, 0x61, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x73, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x2e, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x0f, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x32, 0x0a, 0x04, 0x46, 0x6c, 0x61, 0x67, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1e, 0x2e, 0x63, 0x65, 0x64, 0x61, 0x6e, 0x61, 0x2e, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x2e, 0x46, 0x6c, 0x61,
	0x67, 0x45, 0x6e, 0x75, 0x6d, 0x52, 0x04, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x43, 0x0a, 0x0b, 0x52,
	0x65, 0x6d, 0x6f, 0x74, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x21, 0x2e, 0x63, 0x65, 0x64, 0x61, 0x6e, 0x61, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x73, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x52, 0x0b, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x12, 0x28, 0x0a, 0x0f, 0x47, 0x50, 0x55, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x65, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x47, 0x50, 0x55, 0x43, 0x68,
	0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x65, 0x64, 0x22, 0x30, 0x0a, 0x14, 0x43, 0x6f,
	0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x52, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x4f, 0x70,
	0x74, 0x73, 0x12, 0x0e, 0x0a, 0x0a, 0x43, 0x4f, 0x4e, 0x54, 0x41, 0x49, 0x4e, 0x45, 0x52, 0x44,
	0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x52, 0x55, 0x4e, 0x43, 0x10, 0x01, 0x22, 0x6b, 0x0a, 0x0b,
	0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x43,
	0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x49, 0x44, 0x12,
	0x1a, 0x0a, 0x08, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x49, 0x44, 0x12, 0x1c, 0x0a, 0x09, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x22, 0xa6, 0x01, 0x0a, 0x0a, 0x43, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x48, 0x6f, 0x73, 0x74,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x48, 0x6f, 0x73, 0x74,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d,
	0x12, 0x0e, 0x0a, 0x02, 0x4f, 0x53, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x4f, 0x53,
	0x12, 0x16, 0x0a, 0x06, 0x55, 0x70, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x06, 0x55, 0x70, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x52, 0x65, 0x6d, 0x61,
	0x69, 0x6e, 0x69, 0x6e, 0x67, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x0f, 0x52, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x4d, 0x65, 0x6d, 0x6f,
	0x72, 0x79, 0x22, 0xe4, 0x02, 0x0a, 0x0b, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x10, 0x0a, 0x03, 0x50, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x03, 0x50, 0x49, 0x44, 0x12, 0x38, 0x0a, 0x17, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x65, 0x64,
	0x54, 0x6f, 0x48, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x41, 0x63, 0x63, 0x65, 0x6c, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x17, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x65, 0x64, 0x54,
	0x6f, 0x48, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x41, 0x63, 0x63, 0x65, 0x6c, 0x12, 0x3d,
	0x0a, 0x07, 0x4f, 0x70, 0x65, 0x6e, 0x46, 0x64, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x23, 0x2e, 0x63, 0x65, 0x64, 0x61, 0x6e, 0x61, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x73, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x46, 0x69, 0x6c, 0x65, 0x73,
	0x53, 0x74, 0x61, 0x74, 0x52, 0x07, 0x4f, 0x70, 0x65, 0x6e, 0x46, 0x64, 0x73, 0x12, 0x1e, 0x0a,
	0x0a, 0x57, 0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x44, 0x69, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x57, 0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x44, 0x69, 0x72, 0x12, 0x4e, 0x0a,
	0x0f, 0x4f, 0x70, 0x65, 0x6e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x63, 0x65, 0x64, 0x61, 0x6e, 0x61, 0x2e,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x2e, 0x43, 0x6f,
	0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x52, 0x0f, 0x4f, 0x70,
	0x65, 0x6e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x24, 0x0a,
	0x0d, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x02, 0x52, 0x0d, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x50, 0x65, 0x72, 0x63,
	0x65, 0x6e, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x49, 0x73, 0x52, 0x75, 0x6e, 0x6e, 0x69, 0x6e, 0x67,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x49, 0x73, 0x52, 0x75, 0x6e, 0x6e, 0x69, 0x6e,
	0x67, 0x12, 0x16, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0xca, 0x01, 0x0a, 0x0d, 0x4f, 0x70,
	0x65, 0x6e, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x53, 0x74, 0x61, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x50,
	0x61, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x50, 0x61, 0x74, 0x68, 0x12,
	0x0e, 0x0a, 0x02, 0x46, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x46, 0x64, 0x12,
	0x12, 0x0a, 0x04, 0x4d, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x4d,
	0x6f, 0x64, 0x65, 0x12, 0x46, 0x0a, 0x06, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x2e, 0x2e, 0x63, 0x65, 0x64, 0x61, 0x6e, 0x61, 0x2e, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x46,
	0x69, 0x6c, 0x65, 0x73, 0x53, 0x74, 0x61, 0x74, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x06, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x22, 0x39, 0x0a, 0x0a, 0x53,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x12, 0x09, 0x0a, 0x05, 0x53, 0x54, 0x44,
	0x49, 0x4e, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x53, 0x54, 0x44, 0x4f, 0x55, 0x54, 0x10, 0x01,
	0x12, 0x0a, 0x0a, 0x06, 0x53, 0x54, 0x44, 0x45, 0x52, 0x52, 0x10, 0x02, 0x12, 0x08, 0x0a, 0x04,
	0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x03, 0x22, 0xee, 0x01, 0x0a, 0x0e, 0x43, 0x6f, 0x6e, 0x6e, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x46, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x46, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x46, 0x61, 0x6d,
	0x69, 0x6c, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x46, 0x61, 0x6d, 0x69, 0x6c,
	0x79, 0x12, 0x12, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x30, 0x0a, 0x05, 0x4c, 0x61, 0x64, 0x64, 0x72, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x65, 0x64, 0x61, 0x6e, 0x61, 0x2e, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x2e, 0x41, 0x64, 0x64, 0x72,
	0x52, 0x05, 0x4c, 0x61, 0x64, 0x64, 0x72, 0x12, 0x30, 0x0a, 0x05, 0x52, 0x61, 0x64, 0x64, 0x72,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x65, 0x64, 0x61, 0x6e, 0x61, 0x2e,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x2e, 0x41, 0x64,
	0x64, 0x72, 0x52, 0x05, 0x52, 0x61, 0x64, 0x64, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x12, 0x0a, 0x04, 0x55, 0x69, 0x64, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x05, 0x52,
	0x04, 0x55, 0x69, 0x64, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x50, 0x49, 0x44, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x03, 0x50, 0x49, 0x44, 0x22, 0x2a, 0x0a, 0x04, 0x41, 0x64, 0x64, 0x72, 0x12,
	0x0e, 0x0a, 0x02, 0x49, 0x50, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x49, 0x50, 0x12,
	0x12, 0x0a, 0x04, 0x50, 0x6f, 0x72, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x50,
	0x6f, 0x72, 0x74, 0x22, 0x32, 0x0a, 0x18, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x70, 0x12,
	0x16, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0xa7, 0x01, 0x0a, 0x16, 0x4d, 0x65, 0x74, 0x61,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x41, 0x72,
	0x67, 0x73, 0x12, 0x39, 0x0a, 0x05, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x23, 0x2e, 0x63, 0x65, 0x64, 0x61, 0x6e, 0x61, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x73, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x2e, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65,
	0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x05, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x52, 0x0a,
	0x10, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x65, 0x61, 0x73, 0x6f,
	0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x63, 0x65, 0x64, 0x61, 0x6e, 0x61,
	0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x2e, 0x43,
	0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x52,
	0x10, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x65, 0x61, 0x73, 0x6f,
	0x6e, 0x22, 0xbd, 0x01, 0x0a, 0x10, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x53, 0x0a, 0x06, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3b, 0x2e, 0x63, 0x65, 0x64, 0x61, 0x6e, 0x61, 0x2e,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x2e, 0x43, 0x68,
	0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x2e, 0x43,
	0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x45,
	0x6e, 0x75, 0x6d, 0x52, 0x06, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x22, 0x54, 0x0a, 0x14, 0x43,
	0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x45,
	0x6e, 0x75, 0x6d, 0x12, 0x18, 0x0a, 0x14, 0x49, 0x4e, 0x53, 0x54, 0x41, 0x4e, 0x43, 0x45, 0x5f,
	0x54, 0x45, 0x52, 0x4d, 0x49, 0x4e, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x00, 0x12, 0x13, 0x0a,
	0x0f, 0x4a, 0x4f, 0x42, 0x5f, 0x54, 0x45, 0x52, 0x4d, 0x49, 0x4e, 0x41, 0x54, 0x49, 0x4f, 0x4e,
	0x10, 0x01, 0x12, 0x0d, 0x0a, 0x09, 0x48, 0x45, 0x41, 0x52, 0x54, 0x42, 0x45, 0x41, 0x54, 0x10,
	0x02, 0x22, 0xab, 0x01, 0x0a, 0x0d, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49,
	0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x49, 0x44, 0x12, 0x1c, 0x0a, 0x09, 0x46, 0x61, 0x75, 0x6c, 0x74, 0x43, 0x6f, 0x64, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x46, 0x61, 0x75, 0x6c, 0x74, 0x43, 0x6f, 0x64,
	0x65, 0x12, 0x32, 0x0a, 0x14, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x64, 0x46, 0x6f, 0x72, 0x54, 0x65,
	0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x14, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x64, 0x46, 0x6f, 0x72, 0x54, 0x65, 0x72, 0x6d, 0x69, 0x6e,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x28, 0x0a, 0x0f, 0x54, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f,
	0x54, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x22,
	0x30, 0x0a, 0x16, 0x4d, 0x65, 0x74, 0x61, 0x53, 0x74, 0x61, 0x74, 0x65, 0x53, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x70, 0x12, 0x16, 0x0a, 0x06, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x22, 0x2e, 0x0a, 0x0c, 0x50, 0x61, 0x75, 0x73, 0x65, 0x50, 0x69, 0x64, 0x41, 0x72, 0x67,
	0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x42, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x50, 0x61, 0x74, 0x68, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x42, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x50, 0x61, 0x74,
	0x68, 0x22, 0x2a, 0x0a, 0x0c, 0x50, 0x61, 0x75, 0x73, 0x65, 0x50, 0x69, 0x64, 0x52, 0x65, 0x73,
	0x70, 0x12, 0x1a, 0x0a, 0x08, 0x50, 0x61, 0x75, 0x73, 0x65, 0x50, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x08, 0x50, 0x61, 0x75, 0x73, 0x65, 0x50, 0x69, 0x64, 0x22, 0x6b, 0x0a,
	0x0d, 0x43, 0x74, 0x72, 0x42, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x41, 0x72, 0x67, 0x73, 0x12, 0x24,
	0x0a, 0x0d, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x53, 0x61, 0x6e, 0x64, 0x62, 0x6f, 0x78, 0x4e,
	0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x53, 0x61, 0x6e, 0x64, 0x62,
	0x6f, 0x78, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x52, 0x6f, 0x6f, 0x74, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x52, 0x6f, 0x6f, 0x74, 0x22, 0x65, 0x0a, 0x0d, 0x43, 0x74,
	0x72, 0x42, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x73, 0x70, 0x12, 0x2c, 0x0a, 0x11, 0x52,
	0x75, 0x6e, 0x63, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x52, 0x75, 0x6e, 0x63, 0x43, 0x6f, 0x6e, 0x74,
	0x61, 0x69, 0x6e, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x52, 0x75, 0x6e,
	0x63, 0x42, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x50, 0x61, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0e, 0x52, 0x75, 0x6e, 0x63, 0x42, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x50, 0x61, 0x74,
	0x68, 0x22, 0x1e, 0x0a, 0x08, 0x52, 0x75, 0x6e, 0x63, 0x52, 0x6f, 0x6f, 0x74, 0x12, 0x12, 0x0a,
	0x04, 0x52, 0x6f, 0x6f, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x52, 0x6f, 0x6f,
	0x74, 0x22, 0x2a, 0x0a, 0x08, 0x52, 0x75, 0x6e, 0x63, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x1e, 0x0a,
	0x0a, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x0a, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x73, 0x22, 0x47, 0x0a,
	0x11, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x44, 0x75, 0x6d, 0x70, 0x41, 0x72,
	0x67, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x49,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e,
	0x65, 0x72, 0x49, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x52, 0x65, 0x66, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x52, 0x65, 0x66, 0x22, 0x55, 0x0a, 0x11, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69,
	0x6e, 0x65, 0x72, 0x44, 0x75, 0x6d, 0x70, 0x52, 0x65, 0x73, 0x70, 0x12, 0x26, 0x0a, 0x0e, 0x43,
	0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x50, 0x61, 0x74, 0x68, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x50,
	0x61, 0x74, 0x68, 0x12, 0x18, 0x0a, 0x07, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x52, 0x0a,
	0x14, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x52, 0x65, 0x73, 0x74, 0x6f, 0x72,
	0x65, 0x41, 0x72, 0x67, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x49, 0x6d, 0x67, 0x50, 0x61, 0x74, 0x68,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x49, 0x6d, 0x67, 0x50, 0x61, 0x74, 0x68, 0x12,
	0x20, 0x0a, 0x0b, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x49, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x49,
	0x64, 0x22, 0x30, 0x0a, 0x14, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x52, 0x65,
	0x73, 0x74, 0x6f, 0x72, 0x65, 0x52, 0x65, 0x73, 0x70, 0x12, 0x18, 0x0a, 0x07, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x22, 0xa2, 0x02, 0x0a, 0x0c, 0x52, 0x75, 0x6e, 0x63, 0x44, 0x75, 0x6d, 0x70,
	0x41, 0x72, 0x67, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x52, 0x6f, 0x6f, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x52, 0x6f, 0x6f, 0x74, 0x12, 0x26, 0x0a, 0x0e, 0x43, 0x68, 0x65, 0x63,
	0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x50, 0x61, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x50, 0x61, 0x74, 0x68,
	0x12, 0x20, 0x0a, 0x0b, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x49, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72,
	0x49, 0x64, 0x12, 0x3a, 0x0a, 0x08, 0x43, 0x72, 0x69, 0x75, 0x4f, 0x70, 0x74, 0x73, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x63, 0x65, 0x64, 0x61, 0x6e, 0x61, 0x2e, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x2e, 0x43, 0x72, 0x69, 0x75,
	0x4f, 0x70, 0x74, 0x73, 0x52, 0x08, 0x43, 0x72, 0x69, 0x75, 0x4f, 0x70, 0x74, 0x73, 0x12, 0x3f,
	0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2b, 0x2e, 0x63,
	0x65, 0x64, 0x61, 0x6e, 0x61, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x74,
	0x61, 0x73, 0x6b, 0x2e, 0x52, 0x75, 0x6e, 0x63, 0x44, 0x75, 0x6d, 0x70, 0x41, 0x72, 0x67, 0x73,
	0x2e, 0x44, 0x75, 0x6d, 0x70, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x14, 0x0a, 0x05, 0x4a, 0x6f, 0x62, 0x49, 0x44, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x4a, 0x6f, 0x62, 0x49, 0x44, 0x22, 0x21, 0x0a, 0x08, 0x44, 0x75, 0x6d, 0x70, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x09, 0x0a, 0x05, 0x4c, 0x4f, 0x43, 0x41, 0x4c, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06,
	0x52, 0x45, 0x4d, 0x4f, 0x54, 0x45, 0x10, 0x01, 0x22, 0x4c, 0x0a, 0x0c, 0x52, 0x75, 0x6e, 0x63,
	0x44, 0x75, 0x6d, 0x70, 0x52, 0x65, 0x73, 0x70, 0x12, 0x18, 0x0a, 0x07, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x49, 0x64, 0x22, 0x92, 0x04, 0x0a, 0x08, 0x43, 0x72, 0x69, 0x75, 0x4f,
	0x70, 0x74, 0x73, 0x12, 0x28, 0x0a, 0x0f, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x73, 0x44, 0x69, 0x72,
	0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x49, 0x6d,
	0x61, 0x67, 0x65, 0x73, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x24, 0x0a,
	0x0d, 0x57, 0x6f, 0x72, 0x6b, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x57, 0x6f, 0x72, 0x6b, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74,
	0x6f, 0x72, 0x79, 0x12, 0x20, 0x0a, 0x0b, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x49, 0x6d, 0x61,
	0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x74,
	0x49, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x4c, 0x65, 0x61, 0x76, 0x65, 0x52, 0x75,
	0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x4c, 0x65, 0x61,
	0x76, 0x65, 0x52, 0x75, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x12, 0x26, 0x0a, 0x0e, 0x54, 0x63, 0x70,
	0x45, 0x73, 0x74, 0x61, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0e, 0x54, 0x63, 0x70, 0x45, 0x73, 0x74, 0x61, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65,
	0x64, 0x12, 0x38, 0x0a, 0x17, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x55, 0x6e, 0x69,
	0x78, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x17, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x55, 0x6e, 0x69, 0x78,
	0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x53,
	0x68, 0x65, 0x6c, 0x6c, 0x4a, 0x6f, 0x62, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x53,
	0x68, 0x65, 0x6c, 0x6c, 0x4a, 0x6f, 0x62, 0x12, 0x1c, 0x0a, 0x09, 0x46, 0x69, 0x6c, 0x65, 0x4c,
	0x6f, 0x63, 0x6b, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x46, 0x69, 0x6c, 0x65,
	0x4c, 0x6f, 0x63, 0x6b, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x50, 0x72, 0x65, 0x44, 0x75, 0x6d, 0x70,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x50, 0x72, 0x65, 0x44, 0x75, 0x6d, 0x70, 0x12,
	0x18, 0x0a, 0x07, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x4e, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x07, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x4e, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x41, 0x75, 0x74,
	0x6f, 0x44, 0x65, 0x64, 0x75, 0x70, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x41, 0x75,
	0x74, 0x6f, 0x44, 0x65, 0x64, 0x75, 0x70, 0x12, 0x1c, 0x0a, 0x09, 0x4c, 0x61, 0x7a, 0x79, 0x50,
	0x61, 0x67, 0x65, 0x73, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x4c, 0x61, 0x7a, 0x79,
	0x50, 0x61, 0x67, 0x65, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x46,
	0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x46,
	0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x4c, 0x73, 0x6d, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x18,
	0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x4c, 0x73, 0x6d, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c,
	0x65, 0x12, 0x28, 0x0a, 0x0f, 0x4c, 0x73, 0x6d, 0x4d, 0x6f, 0x75, 0x6e, 0x74, 0x43, 0x6f, 0x6e,
	0x74, 0x65, 0x78, 0x74, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x4c, 0x73, 0x6d, 0x4d,
	0x6f, 0x75, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x22, 0xac, 0x02, 0x0a, 0x0f,
	0x52, 0x75, 0x6e, 0x63, 0x52, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x41, 0x72, 0x67, 0x73, 0x12,
	0x20, 0x0a, 0x0b, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x49,
	0x64, 0x12, 0x1c, 0x0a, 0x09, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x50, 0x61, 0x74, 0x68, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x50, 0x61, 0x74, 0x68, 0x12,
	0x14, 0x0a, 0x05, 0x49, 0x73, 0x4b, 0x33, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05,
	0x49, 0x73, 0x4b, 0x33, 0x73, 0x12, 0x32, 0x0a, 0x04, 0x4f, 0x70, 0x74, 0x73, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x63, 0x65, 0x64, 0x61, 0x6e, 0x61, 0x2e, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x2e, 0x52, 0x75, 0x6e, 0x63, 0x4f,
	0x70, 0x74, 0x73, 0x52, 0x04, 0x4f, 0x70, 0x74, 0x73, 0x12, 0x45, 0x0a, 0x04, 0x54, 0x79, 0x70,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x31, 0x2e, 0x63, 0x65, 0x64, 0x61, 0x6e, 0x61,
	0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x2e, 0x52,
	0x75, 0x6e, 0x63, 0x52, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x41, 0x72, 0x67, 0x73, 0x2e, 0x52,
	0x65, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x22, 0x0a, 0x0c, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x49, 0x64,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x49, 0x64, 0x22, 0x24, 0x0a, 0x0b, 0x52, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x09, 0x0a, 0x05, 0x4c, 0x4f, 0x43, 0x41, 0x4c, 0x10, 0x00, 0x12, 0x0a,
	0x0a, 0x06, 0x52, 0x45, 0x4d, 0x4f, 0x54, 0x45, 0x10, 0x01, 0x22, 0xcc, 0x03, 0x0a, 0x08, 0x52,
	0x75, 0x6e, 0x63, 0x4f, 0x70, 0x74, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x52, 0x6f, 0x6f, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x52, 0x6f, 0x6f, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x43,
	0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x49, 0x64, 0x12, 0x16, 0x0a,
	0x06, 0x42, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x42,
	0x75, 0x6e, 0x64, 0x6c, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x64,
	0x43, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x53, 0x79,
	0x73, 0x74, 0x65, 0x6d, 0x64, 0x43, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x18, 0x0a, 0x07, 0x4e,
	0x6f, 0x50, 0x69, 0x76, 0x6f, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x4e, 0x6f,
	0x50, 0x69, 0x76, 0x6f, 0x74, 0x12, 0x28, 0x0a, 0x0f, 0x4e, 0x6f, 0x4d, 0x6f, 0x75, 0x6e, 0x74,
	0x46, 0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f,
	0x4e, 0x6f, 0x4d, 0x6f, 0x75, 0x6e, 0x74, 0x46, 0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x12,
	0x22, 0x0a, 0x0c, 0x4e, 0x6f, 0x4e, 0x65, 0x77, 0x4b, 0x65, 0x79, 0x72, 0x69, 0x6e, 0x67, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x4e, 0x6f, 0x4e, 0x65, 0x77, 0x4b, 0x65, 0x79, 0x72,
	0x69, 0x6e, 0x67, 0x12, 0x1a, 0x0a, 0x08, 0x52, 0x6f, 0x6f, 0x74, 0x6c, 0x65, 0x73, 0x73, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x52, 0x6f, 0x6f, 0x74, 0x6c, 0x65, 0x73, 0x73, 0x12,
	0x20, 0x0a, 0x0b, 0x4e, 0x6f, 0x53, 0x75, 0x62, 0x72, 0x65, 0x61, 0x70, 0x65, 0x72, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x4e, 0x6f, 0x53, 0x75, 0x62, 0x72, 0x65, 0x61, 0x70, 0x65,
	0x72, 0x12, 0x12, 0x0a, 0x04, 0x4b, 0x65, 0x65, 0x70, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x04, 0x4b, 0x65, 0x65, 0x70, 0x12, 0x24, 0x0a, 0x0d, 0x43, 0x6f, 0x6e, 0x73, 0x6f, 0x6c, 0x65,
	0x53, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x43, 0x6f,
	0x6e, 0x73, 0x6f, 0x6c, 0x65, 0x53, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x44,
	0x65, 0x74, 0x61, 0x74, 0x63, 0x68, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x44, 0x65,
	0x74, 0x61, 0x74, 0x63, 0x68, 0x12, 0x18, 0x0a, 0x07, 0x50, 0x69, 0x64, 0x46, 0x69, 0x6c, 0x65,
	0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x50, 0x69, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x12,
	0x20, 0x0a, 0x0b, 0x50, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x46, 0x64, 0x73, 0x18, 0x0e,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x50, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x46, 0x64,
	0x73, 0x12, 0x16, 0x0a, 0x06, 0x4e, 0x65, 0x74, 0x50, 0x69, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x06, 0x4e, 0x65, 0x74, 0x50, 0x69, 0x64, 0x22, 0x2b, 0x0a, 0x0f, 0x52, 0x75, 0x6e,
	0x63, 0x52, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x52, 0x65, 0x73, 0x70, 0x12, 0x18, 0x0a, 0x07,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2a, 0x86, 0x01, 0x0a, 0x08, 0x46, 0x6c, 0x61, 0x67, 0x45,
	0x6e, 0x75, 0x6d, 0x12, 0x16, 0x0a, 0x12, 0x4a, 0x4f, 0x42, 0x5f, 0x53, 0x54, 0x41, 0x52, 0x54,
	0x55, 0x50, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x4a,
	0x4f, 0x42, 0x5f, 0x4b, 0x49, 0x4c, 0x4c, 0x45, 0x44, 0x10, 0x01, 0x12, 0x0c, 0x0a, 0x08, 0x4a,
	0x4f, 0x42, 0x5f, 0x49, 0x44, 0x4c, 0x45, 0x10, 0x02, 0x12, 0x0f, 0x0a, 0x0b, 0x4a, 0x4f, 0x42,
	0x5f, 0x52, 0x55, 0x4e, 0x4e, 0x49, 0x4e, 0x47, 0x10, 0x03, 0x12, 0x0f, 0x0a, 0x0b, 0x4a, 0x4f,
	0x42, 0x5f, 0x50, 0x45, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x10, 0x04, 0x12, 0x14, 0x0a, 0x10, 0x4a,
	0x4f, 0x42, 0x5f, 0x53, 0x45, 0x54, 0x55, 0x50, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x10,
	0x05, 0x12, 0x0c, 0x0a, 0x08, 0x4a, 0x4f, 0x42, 0x5f, 0x44, 0x4f, 0x4e, 0x45, 0x10, 0x06, 0x2a,
	0x5c, 0x0a, 0x0f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x12, 0x10, 0x0a, 0x0c, 0x43, 0x48, 0x45, 0x43, 0x4b, 0x50, 0x4f, 0x49, 0x4e, 0x54,
	0x45, 0x44, 0x10, 0x00, 0x12, 0x15, 0x0a, 0x11, 0x43, 0x48, 0x45, 0x43, 0x4b, 0x50, 0x4f, 0x49,
	0x4e, 0x54, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x10, 0x01, 0x12, 0x0c, 0x0a, 0x08, 0x52,
	0x45, 0x53, 0x54, 0x4f, 0x52, 0x45, 0x44, 0x10, 0x02, 0x12, 0x12, 0x0a, 0x0e, 0x52, 0x45, 0x53,
	0x54, 0x4f, 0x52, 0x45, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x10, 0x03, 0x32, 0xaa, 0x0a,
	0x0a, 0x0b, 0x54, 0x61, 0x73, 0x6b, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x46, 0x0a,
	0x04, 0x44, 0x75, 0x6d, 0x70, 0x12, 0x1e, 0x2e, 0x63, 0x65, 0x64, 0x61, 0x6e, 0x61, 0x2e, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x2e, 0x44, 0x75, 0x6d,
	0x70, 0x41, 0x72, 0x67, 0x73, 0x1a, 0x1e, 0x2e, 0x63, 0x65, 0x64, 0x61, 0x6e, 0x61, 0x2e, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x2e, 0x44, 0x75, 0x6d,
	0x70, 0x52, 0x65, 0x73, 0x70, 0x12, 0x4f, 0x0a, 0x07, 0x52, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x65,
	0x12, 0x21, 0x2e, 0x63, 0x65, 0x64, 0x61, 0x6e, 0x61, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x73, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x2e, 0x52, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x41,
	0x72, 0x67, 0x73, 0x1a, 0x21, 0x2e, 0x63, 0x65, 0x64, 0x61, 0x6e, 0x61, 0x2e, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x2e, 0x52, 0x65, 0x73, 0x74, 0x6f,
	0x72, 0x65, 0x52, 0x65, 0x73, 0x70, 0x12, 0x61, 0x0a, 0x0d, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69,
	0x6e, 0x65, 0x72, 0x44, 0x75, 0x6d, 0x70, 0x12, 0x27, 0x2e, 0x63, 0x65, 0x64, 0x61, 0x6e, 0x61,
	0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x2e, 0x43,
	0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x44, 0x75, 0x6d, 0x70, 0x41, 0x72, 0x67, 0x73,
	0x1a, 0x27, 0x2e, 0x63, 0x65, 0x64, 0x61, 0x6e, 0x61, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x73, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65,
	0x72, 0x44, 0x75, 0x6d, 0x70, 0x52, 0x65, 0x73, 0x70, 0x12, 0x6a, 0x0a, 0x10, 0x43, 0x6f, 0x6e,
	0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x52, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x12, 0x2a, 0x2e,
	0x63, 0x65, 0x64, 0x61, 0x6e, 0x61, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e,
	0x74, 0x61, 0x73, 0x6b, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x52, 0x65,
	0x73, 0x74, 0x6f, 0x72, 0x65, 0x41, 0x72, 0x67, 0x73, 0x1a, 0x2a, 0x2e, 0x63, 0x65, 0x64, 0x61,
	0x6e, 0x61, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x74, 0x61, 0x73, 0x6b,
	0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x52, 0x65, 0x73, 0x74, 0x6f, 0x72,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x12, 0x52, 0x0a, 0x08, 0x52, 0x75, 0x6e, 0x63, 0x44, 0x75, 0x6d,
	0x70, 0x12, 0x22, 0x2e, 0x63, 0x65, 0x64, 0x61, 0x6e, 0x61, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x73, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x2e, 0x52, 0x75, 0x6e, 0x63, 0x44, 0x75, 0x6d,
	0x70, 0x41, 0x72, 0x67, 0x73, 0x1a, 0x22, 0x2e, 0x63, 0x65, 0x64, 0x61, 0x6e, 0x61, 0x2e, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x2e, 0x52, 0x75, 0x6e,
	0x63, 0x44, 0x75, 0x6d, 0x70, 0x52, 0x65, 0x73, 0x70, 0x12, 0x5b, 0x0a, 0x0b, 0x52, 0x75, 0x6e,
	0x63, 0x52, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x12, 0x25, 0x2e, 0x63, 0x65, 0x64, 0x61, 0x6e,
	0x61, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x2e,
	0x52, 0x75, 0x6e, 0x63, 0x52, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x41, 0x72, 0x67, 0x73, 0x1a,
	0x25, 0x2e, 0x63, 0x65, 0x64, 0x61, 0x6e, 0x61, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x73, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x2e, 0x52, 0x75, 0x6e, 0x63, 0x52, 0x65, 0x73, 0x74, 0x6f,
	0x72, 0x65, 0x52, 0x65, 0x73, 0x70, 0x12, 0x55, 0x0a, 0x09, 0x53, 0x74, 0x61, 0x72, 0x74, 0x54,
	0x61, 0x73, 0x6b, 0x12, 0x23, 0x2e, 0x63, 0x65, 0x64, 0x61, 0x6e, 0x61, 0x2e, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x2e, 0x53, 0x74, 0x61, 0x72, 0x74,
	0x54, 0x61, 0x73, 0x6b, 0x41, 0x72, 0x67, 0x73, 0x1a, 0x23, 0x2e, 0x63, 0x65, 0x64, 0x61, 0x6e,
	0x61, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x2e,
	0x53, 0x74, 0x61, 0x72, 0x74, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x12, 0x62, 0x0a,
	0x0c, 0x4c, 0x6f, 0x67, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x12, 0x26, 0x2e,
	0x63, 0x65, 0x64, 0x61, 0x6e, 0x61, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e,
	0x74, 0x61, 0x73, 0x6b, 0x2e, 0x4c, 0x6f, 0x67, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e,
	0x67, 0x52, 0x65, 0x73, 0x70, 0x1a, 0x26, 0x2e, 0x63, 0x65, 0x64, 0x61, 0x6e, 0x61, 0x2e, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x2e, 0x4c, 0x6f, 0x67,
	0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x41, 0x72, 0x67, 0x73, 0x28, 0x01, 0x30,
	0x01, 0x12, 0x6e, 0x0a, 0x14, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x12, 0x2e, 0x2e, 0x63, 0x65, 0x64, 0x61,
	0x6e, 0x61, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x74, 0x61, 0x73, 0x6b,
	0x2e, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x53, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x70, 0x1a, 0x22, 0x2e, 0x63, 0x65, 0x64, 0x61,
	0x6e, 0x61, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x74, 0x61, 0x73, 0x6b,
	0x2e, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x53, 0x74, 0x61, 0x74, 0x65, 0x28, 0x01, 0x30,
	0x01, 0x12, 0x74, 0x0a, 0x12, 0x4d, 0x65, 0x74, 0x61, 0x53, 0x74, 0x61, 0x74, 0x65, 0x53, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x12, 0x2c, 0x2e, 0x63, 0x65, 0x64, 0x61, 0x6e, 0x61,
	0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x2e, 0x4d,
	0x65, 0x74, 0x61, 0x53, 0x74, 0x61, 0x74, 0x65, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e,
	0x67, 0x41, 0x72, 0x67, 0x73, 0x1a, 0x2c, 0x2e, 0x63, 0x65, 0x64, 0x61, 0x6e, 0x61, 0x2e, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x2e, 0x4d, 0x65, 0x74,
	0x61, 0x53, 0x74, 0x61, 0x74, 0x65, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x52,
	0x65, 0x73, 0x70, 0x28, 0x01, 0x30, 0x01, 0x12, 0x54, 0x0a, 0x12, 0x4c, 0x69, 0x73, 0x74, 0x52,
	0x75, 0x6e, 0x63, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x73, 0x12, 0x1e, 0x2e,
	0x63, 0x65, 0x64, 0x61, 0x6e, 0x61, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e,
	0x74, 0x61, 0x73, 0x6b, 0x2e, 0x52, 0x75, 0x6e, 0x63, 0x52, 0x6f, 0x6f, 0x74, 0x1a, 0x1e, 0x2e,
	0x63, 0x65, 0x64, 0x61, 0x6e, 0x61, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e,
	0x74, 0x61, 0x73, 0x6b, 0x2e, 0x52, 0x75, 0x6e, 0x63, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x62, 0x0a,
	0x16, 0x47, 0x65, 0x74, 0x52, 0x75, 0x6e, 0x63, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65,
	0x72, 0x42, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x23, 0x2e, 0x63, 0x65, 0x64, 0x61, 0x6e, 0x61,
	0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x2e, 0x43,
	0x74, 0x72, 0x42, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x41, 0x72, 0x67, 0x73, 0x1a, 0x23, 0x2e, 0x63,
	0x65, 0x64, 0x61, 0x6e, 0x61, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x74,
	0x61, 0x73, 0x6b, 0x2e, 0x43, 0x74, 0x72, 0x42, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x12, 0x55, 0x0a, 0x0b, 0x47, 0x65, 0x74, 0x50, 0x61, 0x75, 0x73, 0x65, 0x50, 0x69, 0x64,
	0x12, 0x22, 0x2e, 0x63, 0x65, 0x64, 0x61, 0x6e, 0x61, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x73, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x2e, 0x50, 0x61, 0x75, 0x73, 0x65, 0x50, 0x69, 0x64,
	0x41, 0x72, 0x67, 0x73, 0x1a, 0x22, 0x2e, 0x63, 0x65, 0x64, 0x61, 0x6e, 0x61, 0x2e, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x2e, 0x50, 0x61, 0x75, 0x73,
	0x65, 0x50, 0x69, 0x64, 0x52, 0x65, 0x73, 0x70, 0x12, 0x50, 0x0a, 0x0e, 0x4c, 0x69, 0x73, 0x74,
	0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x73, 0x12, 0x1e, 0x2e, 0x63, 0x65, 0x64,
	0x61, 0x6e, 0x61, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x74, 0x61, 0x73,
	0x6b, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x72, 0x67, 0x73, 0x1a, 0x1e, 0x2e, 0x63, 0x65, 0x64,
	0x61, 0x6e, 0x61, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x74, 0x61, 0x73,
	0x6b, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x42, 0x2c, 0x5a, 0x2a, 0x67, 0x69,
	0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x65, 0x64, 0x61, 0x6e, 0x61, 0x2f,
	0x63, 0x65, 0x64, 0x61, 0x6e, 0x61, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x73, 0x2f, 0x74, 0x61, 0x73, 0x6b, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_task_proto_rawDescOnce sync.Once
	file_task_proto_rawDescData = file_task_proto_rawDesc
)

func file_task_proto_rawDescGZIP() []byte {
	file_task_proto_rawDescOnce.Do(func() {
		file_task_proto_rawDescData = protoimpl.X.CompressGZIP(file_task_proto_rawDescData)
	})
	return file_task_proto_rawDescData
}

var file_task_proto_enumTypes = make([]protoimpl.EnumInfo, 9)
var file_task_proto_msgTypes = make([]protoimpl.MessageInfo, 42)
var file_task_proto_goTypes = []interface{}{
	(FlagEnum)(0),                              // 0: cedana.services.task.FlagEnum
	(CheckpointState)(0),                       // 1: cedana.services.task.checkpointState
	(DumpArgs_DumpType)(0),                     // 2: cedana.services.task.DumpArgs.DumpType
	(RestoreArgs_RestoreType)(0),               // 3: cedana.services.task.RestoreArgs.RestoreType
	(ProcessState_ContainerRuntimeOpts)(0),     // 4: cedana.services.task.ProcessState.ContainerRuntimeOpts
	(OpenFilesStat_StreamType)(0),              // 5: cedana.services.task.OpenFilesStat.StreamType
	(CheckpointReason_CheckpointReasonEnum)(0), // 6: cedana.services.task.CheckpointReason.CheckpointReasonEnum
	(RuncDumpArgs_DumpType)(0),                 // 7: cedana.services.task.RuncDumpArgs.DumpType
	(RuncRestoreArgs_RestoreType)(0),           // 8: cedana.services.task.RuncRestoreArgs.RestoreType
	(*ListArgs)(nil),                           // 9: cedana.services.task.ListArgs
	(*ListResp)(nil),                           // 10: cedana.services.task.ListResp
	(*Container)(nil),                          // 11: cedana.services.task.Container
	(*Annotation)(nil),                         // 12: cedana.services.task.Annotation
	(*External)(nil),                           // 13: cedana.services.task.External
	(*DumpArgs)(nil),                           // 14: cedana.services.task.DumpArgs
	(*DumpResp)(nil),                           // 15: cedana.services.task.DumpResp
	(*RestoreArgs)(nil),                        // 16: cedana.services.task.RestoreArgs
	(*RestoreResp)(nil),                        // 17: cedana.services.task.RestoreResp
	(*StartTaskArgs)(nil),                      // 18: cedana.services.task.StartTaskArgs
	(*StartTaskResp)(nil),                      // 19: cedana.services.task.StartTaskResp
	(*LogStreamingArgs)(nil),                   // 20: cedana.services.task.LogStreamingArgs
	(*LogStreamingResp)(nil),                   // 21: cedana.services.task.LogStreamingResp
	(*ProcessState)(nil),                       // 22: cedana.services.task.ProcessState
	(*RemoteState)(nil),                        // 23: cedana.services.task.RemoteState
	(*ClientInfo)(nil),                         // 24: cedana.services.task.ClientInfo
	(*ProcessInfo)(nil),                        // 25: cedana.services.task.ProcessInfo
	(*OpenFilesStat)(nil),                      // 26: cedana.services.task.OpenFilesStat
	(*ConnectionStat)(nil),                     // 27: cedana.services.task.ConnectionStat
	(*Addr)(nil),                               // 28: cedana.services.task.Addr
	(*ClientStateStreamingResp)(nil),           // 29: cedana.services.task.ClientStateStreamingResp
	(*MetaStateStreamingArgs)(nil),             // 30: cedana.services.task.MetaStateStreamingArgs
	(*CheckpointReason)(nil),                   // 31: cedana.services.task.CheckpointReason
	(*ProviderEvent)(nil),                      // 32: cedana.services.task.ProviderEvent
	(*MetaStateStreamingResp)(nil),             // 33: cedana.services.task.MetaStateStreamingResp
	(*PausePidArgs)(nil),                       // 34: cedana.services.task.PausePidArgs
	(*PausePidResp)(nil),                       // 35: cedana.services.task.PausePidResp
	(*CtrByNameArgs)(nil),                      // 36: cedana.services.task.CtrByNameArgs
	(*CtrByNameResp)(nil),                      // 37: cedana.services.task.CtrByNameResp
	(*RuncRoot)(nil),                           // 38: cedana.services.task.RuncRoot
	(*RuncList)(nil),                           // 39: cedana.services.task.RuncList
	(*ContainerDumpArgs)(nil),                  // 40: cedana.services.task.ContainerDumpArgs
	(*ContainerDumpResp)(nil),                  // 41: cedana.services.task.ContainerDumpResp
	(*ContainerRestoreArgs)(nil),               // 42: cedana.services.task.ContainerRestoreArgs
	(*ContainerRestoreResp)(nil),               // 43: cedana.services.task.ContainerRestoreResp
	(*RuncDumpArgs)(nil),                       // 44: cedana.services.task.RuncDumpArgs
	(*RuncDumpResp)(nil),                       // 45: cedana.services.task.RuncDumpResp
	(*CriuOpts)(nil),                           // 46: cedana.services.task.CriuOpts
	(*RuncRestoreArgs)(nil),                    // 47: cedana.services.task.RuncRestoreArgs
	(*RuncOpts)(nil),                           // 48: cedana.services.task.RuncOpts
	(*RuncRestoreResp)(nil),                    // 49: cedana.services.task.RuncRestoreResp
	nil,                                        // 50: cedana.services.task.Annotation.AnnotationsEntry
}
var file_task_proto_depIdxs = []int32{
	11, // 0: cedana.services.task.ListResp.containers:type_name -> cedana.services.task.Container
	50, // 1: cedana.services.task.Annotation.Annotations:type_name -> cedana.services.task.Annotation.AnnotationsEntry
	2,  // 2: cedana.services.task.DumpArgs.Type:type_name -> cedana.services.task.DumpArgs.DumpType
	3,  // 3: cedana.services.task.RestoreArgs.Type:type_name -> cedana.services.task.RestoreArgs.RestoreType
	4,  // 4: cedana.services.task.ProcessState.ContainerRuntime:type_name -> cedana.services.task.ProcessState.ContainerRuntimeOpts
	25, // 5: cedana.services.task.ProcessState.ProcessInfo:type_name -> cedana.services.task.ProcessInfo
	1,  // 6: cedana.services.task.ProcessState.CheckpointState:type_name -> cedana.services.task.checkpointState
	0,  // 7: cedana.services.task.ProcessState.Flag:type_name -> cedana.services.task.FlagEnum
	23, // 8: cedana.services.task.ProcessState.RemoteState:type_name -> cedana.services.task.RemoteState
	26, // 9: cedana.services.task.ProcessInfo.OpenFds:type_name -> cedana.services.task.OpenFilesStat
	27, // 10: cedana.services.task.ProcessInfo.OpenConnections:type_name -> cedana.services.task.ConnectionStat
	5,  // 11: cedana.services.task.OpenFilesStat.Stream:type_name -> cedana.services.task.OpenFilesStat.StreamType
	28, // 12: cedana.services.task.ConnectionStat.Laddr:type_name -> cedana.services.task.Addr
	28, // 13: cedana.services.task.ConnectionStat.Raddr:type_name -> cedana.services.task.Addr
	32, // 14: cedana.services.task.MetaStateStreamingArgs.Event:type_name -> cedana.services.task.ProviderEvent
	31, // 15: cedana.services.task.MetaStateStreamingArgs.CheckpointReason:type_name -> cedana.services.task.CheckpointReason
	6,  // 16: cedana.services.task.CheckpointReason.Reason:type_name -> cedana.services.task.CheckpointReason.CheckpointReasonEnum
	46, // 17: cedana.services.task.RuncDumpArgs.CriuOpts:type_name -> cedana.services.task.CriuOpts
	7,  // 18: cedana.services.task.RuncDumpArgs.Type:type_name -> cedana.services.task.RuncDumpArgs.DumpType
	48, // 19: cedana.services.task.RuncRestoreArgs.Opts:type_name -> cedana.services.task.RuncOpts
	8,  // 20: cedana.services.task.RuncRestoreArgs.Type:type_name -> cedana.services.task.RuncRestoreArgs.RestoreType
	14, // 21: cedana.services.task.TaskService.Dump:input_type -> cedana.services.task.DumpArgs
	16, // 22: cedana.services.task.TaskService.Restore:input_type -> cedana.services.task.RestoreArgs
	40, // 23: cedana.services.task.TaskService.ContainerDump:input_type -> cedana.services.task.ContainerDumpArgs
	42, // 24: cedana.services.task.TaskService.ContainerRestore:input_type -> cedana.services.task.ContainerRestoreArgs
	44, // 25: cedana.services.task.TaskService.RuncDump:input_type -> cedana.services.task.RuncDumpArgs
	47, // 26: cedana.services.task.TaskService.RuncRestore:input_type -> cedana.services.task.RuncRestoreArgs
	18, // 27: cedana.services.task.TaskService.StartTask:input_type -> cedana.services.task.StartTaskArgs
	21, // 28: cedana.services.task.TaskService.LogStreaming:input_type -> cedana.services.task.LogStreamingResp
	29, // 29: cedana.services.task.TaskService.ClientStateStreaming:input_type -> cedana.services.task.ClientStateStreamingResp
	30, // 30: cedana.services.task.TaskService.MetaStateStreaming:input_type -> cedana.services.task.MetaStateStreamingArgs
	38, // 31: cedana.services.task.TaskService.ListRuncContainers:input_type -> cedana.services.task.RuncRoot
	36, // 32: cedana.services.task.TaskService.GetRuncContainerByName:input_type -> cedana.services.task.CtrByNameArgs
	34, // 33: cedana.services.task.TaskService.GetPausePid:input_type -> cedana.services.task.PausePidArgs
	9,  // 34: cedana.services.task.TaskService.ListContainers:input_type -> cedana.services.task.ListArgs
	15, // 35: cedana.services.task.TaskService.Dump:output_type -> cedana.services.task.DumpResp
	17, // 36: cedana.services.task.TaskService.Restore:output_type -> cedana.services.task.RestoreResp
	41, // 37: cedana.services.task.TaskService.ContainerDump:output_type -> cedana.services.task.ContainerDumpResp
	43, // 38: cedana.services.task.TaskService.ContainerRestore:output_type -> cedana.services.task.ContainerRestoreResp
	45, // 39: cedana.services.task.TaskService.RuncDump:output_type -> cedana.services.task.RuncDumpResp
	49, // 40: cedana.services.task.TaskService.RuncRestore:output_type -> cedana.services.task.RuncRestoreResp
	19, // 41: cedana.services.task.TaskService.StartTask:output_type -> cedana.services.task.StartTaskResp
	20, // 42: cedana.services.task.TaskService.LogStreaming:output_type -> cedana.services.task.LogStreamingArgs
	22, // 43: cedana.services.task.TaskService.ClientStateStreaming:output_type -> cedana.services.task.ProcessState
	33, // 44: cedana.services.task.TaskService.MetaStateStreaming:output_type -> cedana.services.task.MetaStateStreamingResp
	39, // 45: cedana.services.task.TaskService.ListRuncContainers:output_type -> cedana.services.task.RuncList
	37, // 46: cedana.services.task.TaskService.GetRuncContainerByName:output_type -> cedana.services.task.CtrByNameResp
	35, // 47: cedana.services.task.TaskService.GetPausePid:output_type -> cedana.services.task.PausePidResp
	10, // 48: cedana.services.task.TaskService.ListContainers:output_type -> cedana.services.task.ListResp
	35, // [35:49] is the sub-list for method output_type
	21, // [21:35] is the sub-list for method input_type
	21, // [21:21] is the sub-list for extension type_name
	21, // [21:21] is the sub-list for extension extendee
	0,  // [0:21] is the sub-list for field type_name
}

func init() { file_task_proto_init() }
func file_task_proto_init() {
	if File_task_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_task_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListArgs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_task_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_task_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Container); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_task_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Annotation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_task_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*External); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_task_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DumpArgs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_task_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DumpResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_task_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RestoreArgs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_task_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RestoreResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_task_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StartTaskArgs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_task_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StartTaskResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_task_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LogStreamingArgs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_task_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LogStreamingResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_task_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProcessState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_task_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemoteState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_task_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClientInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_task_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProcessInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_task_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OpenFilesStat); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_task_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConnectionStat); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_task_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Addr); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_task_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClientStateStreamingResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_task_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MetaStateStreamingArgs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_task_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CheckpointReason); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_task_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProviderEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_task_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MetaStateStreamingResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_task_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PausePidArgs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_task_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PausePidResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_task_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CtrByNameArgs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_task_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CtrByNameResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_task_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RuncRoot); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_task_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RuncList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_task_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ContainerDumpArgs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_task_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ContainerDumpResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_task_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ContainerRestoreArgs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_task_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ContainerRestoreResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_task_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RuncDumpArgs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_task_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RuncDumpResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_task_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CriuOpts); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_task_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RuncRestoreArgs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_task_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RuncOpts); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_task_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RuncRestoreResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_task_proto_rawDesc,
			NumEnums:      9,
			NumMessages:   42,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_task_proto_goTypes,
		DependencyIndexes: file_task_proto_depIdxs,
		EnumInfos:         file_task_proto_enumTypes,
		MessageInfos:      file_task_proto_msgTypes,
	}.Build()
	File_task_proto = out.File
	file_task_proto_rawDesc = nil
	file_task_proto_goTypes = nil
	file_task_proto_depIdxs = nil
}
